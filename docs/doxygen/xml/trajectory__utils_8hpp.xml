<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="trajectory__utils_8hpp" kind="file" language="C++">
    <compoundname>trajectory_utils.hpp</compoundname>
    <includes refid="state__index_8hpp" local="yes">kinematic_arbiter/core/state_index.hpp</includes>
    <includes local="no">Eigen/Dense</includes>
    <includes local="no">cmath</includes>
    <includedby refid="figure8__simulator__node_8hpp" local="yes">/home/spencer/ros2workspace/src/kinematic_arbiter/include/kinematic_arbiter/ros2/simulation/figure8_simulator_node.hpp</includedby>
    <incdepgraph>
      <node id="2">
        <label>kinematic_arbiter/core/state_index.hpp</label>
        <link refid="state__index_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/home/spencer/ros2workspace/src/kinematic_arbiter/include/kinematic_arbiter/core/trajectory_utils.hpp</label>
        <link refid="trajectory__utils_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>cmath</label>
      </node>
      <node id="5">
        <label>string</label>
      </node>
      <node id="7">
        <label>Eigen/Dense</label>
      </node>
      <node id="4">
        <label>vector</label>
      </node>
      <node id="3">
        <label>cstddef</label>
      </node>
      <node id="6">
        <label>unordered_map</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1">
        <label>/home/spencer/ros2workspace/src/kinematic_arbiter/include/kinematic_arbiter/core/trajectory_utils.hpp</label>
        <link refid="trajectory__utils_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>/home/spencer/ros2workspace/src/kinematic_arbiter/src/ros2/simulation/figure8_simulator_node.cpp</label>
        <link refid="figure8__simulator__node_8cpp"/>
      </node>
      <node id="2">
        <label>/home/spencer/ros2workspace/src/kinematic_arbiter/include/kinematic_arbiter/ros2/simulation/figure8_simulator_node.hpp</label>
        <link refid="figure8__simulator__node_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structkinematic__arbiter_1_1utils_1_1Figure8Config" prot="public">kinematic_arbiter::utils::Figure8Config</innerclass>
    <innernamespace refid="namespacekinematic__arbiter">kinematic_arbiter</innernamespace>
    <innernamespace refid="namespacekinematic__arbiter_1_1utils">kinematic_arbiter::utils</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="state__index_8hpp" kindref="compound">kinematic_arbiter/core/state_index.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;Eigen/Dense&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacekinematic__arbiter" kindref="compound">kinematic_arbiter</ref><sp/>{</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">utils<sp/>{</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="13" refid="structkinematic__arbiter_1_1utils_1_1Figure8Config" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structkinematic__arbiter_1_1utils_1_1Figure8Config" kindref="compound">Figure8Config</ref><sp/>{</highlight></codeline>
<codeline lineno="14" refid="structkinematic__arbiter_1_1utils_1_1Figure8Config_1abf9001d43bca4ee9685c0fd271540547" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="structkinematic__arbiter_1_1utils_1_1Figure8Config_1abf9001d43bca4ee9685c0fd271540547" kindref="member">max_velocity</ref><sp/>=<sp/>1.0;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Maximum<sp/>velocity<sp/>along<sp/>the<sp/>trajectory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15" refid="structkinematic__arbiter_1_1utils_1_1Figure8Config_1a9fb55a22b391f3f3ec0345c0906dd68d" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="structkinematic__arbiter_1_1utils_1_1Figure8Config_1a9fb55a22b391f3f3ec0345c0906dd68d" kindref="member">length</ref><sp/>=<sp/>0.5;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Length<sp/>of<sp/>the<sp/>figure-8<sp/>in<sp/>X<sp/>dimension</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16" refid="structkinematic__arbiter_1_1utils_1_1Figure8Config_1a9e1036d75405d890325c421e07c7a7f8" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="structkinematic__arbiter_1_1utils_1_1Figure8Config_1a9e1036d75405d890325c421e07c7a7f8" kindref="member">width</ref><sp/>=<sp/>0.25;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Width<sp/>of<sp/>the<sp/>figure-8<sp/>in<sp/>Y<sp/>dimension</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17" refid="structkinematic__arbiter_1_1utils_1_1Figure8Config_1afba8ef23593c54fb657b1e7d1ca99aea" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="structkinematic__arbiter_1_1utils_1_1Figure8Config_1afba8ef23593c54fb657b1e7d1ca99aea" kindref="member">width_slope</ref><sp/>=<sp/>0.1;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Z<sp/>inclination<sp/>in<sp/>radians</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18" refid="structkinematic__arbiter_1_1utils_1_1Figure8Config_1a8a7ada3bb5df55aa3df6357ee1966444" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="structkinematic__arbiter_1_1utils_1_1Figure8Config_1a8a7ada3bb5df55aa3df6357ee1966444" kindref="member">angular_scale</ref><sp/>=<sp/>0.01;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Scale<sp/>factor<sp/>for<sp/>angular<sp/>motion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal">};</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="31" refid="namespacekinematic__arbiter_1_1utils_1a2ca17a01e42301ffa188c887083eacb5" refkind="member"><highlight class="normal">Eigen::Matrix&lt;double,<sp/>core::StateIndex::kFullStateSize,<sp/>1&gt;<sp/><ref refid="namespacekinematic__arbiter_1_1utils_1a2ca17a01e42301ffa188c887083eacb5" kindref="member">Figure8Trajectory</ref>(</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>time,</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structkinematic__arbiter_1_1utils_1_1Figure8Config" kindref="compound">Figure8Config</ref>&amp;<sp/>config<sp/>=<sp/><ref refid="structkinematic__arbiter_1_1utils_1_1Figure8Config" kindref="compound">Figure8Config</ref>())<sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>SIdx<sp/>=<sp/><ref refid="structkinematic__arbiter_1_1core_1_1StateIndex" kindref="compound">core::StateIndex</ref>;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>StateVector<sp/>=<sp/>Eigen::Matrix&lt;double,<sp/>SIdx::kFullStateSize,<sp/>1&gt;;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Trajectory<sp/>parameters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>a<sp/>=<sp/>config.length<sp/>*<sp/>0.5;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>x<sp/>amplitude</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>b<sp/>=<sp/>config.width<sp/>*<sp/>0.5;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>y<sp/>amplitude</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>config.width<sp/>*<sp/>std::tan(config.width_slope);<sp/></highlight><highlight class="comment">//<sp/>z<sp/>amplitude</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Period<sp/>and<sp/>frequency<sp/>calculations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>T<sp/>=<sp/>M_PI<sp/>*<sp/>std::sqrt(a*a<sp/>+<sp/>4*(b*b<sp/>+<sp/>c*c))<sp/>/<sp/>config.max_velocity;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>w1<sp/>=<sp/>2<sp/>*<sp/>M_PI<sp/>/<sp/>T;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>y,z<sp/>frequency</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>w2<sp/>=<sp/>w1<sp/>*<sp/>0.5;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>x<sp/>frequency</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t<sp/>=<sp/>time;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>current<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>state<sp/>vector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/>StateVector<sp/>states<sp/>=<sp/>StateVector::Zero();</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Position<sp/>vector<sp/>in<sp/>world<sp/>frame</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/>Eigen::Vector3d<sp/>position(</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>*<sp/>std::cos(w2<sp/>*<sp/>t),</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>b<sp/>*<sp/>std::sin(w1<sp/>*<sp/>t),</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>*<sp/>std::sin(w1<sp/>*<sp/>t));</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Store<sp/>position</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/>states.segment&lt;3&gt;(SIdx::Position::Begin())<sp/>=<sp/>position;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Linear<sp/>Inertial<sp/>(World<sp/>Frame)<sp/>Velocity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>Eigen::Vector3d<sp/>i_v(</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>-a<sp/>*<sp/>w2<sp/>*<sp/>std::sin(w2<sp/>*<sp/>t),</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>b<sp/>*<sp/>w1<sp/>*<sp/>std::cos(w1<sp/>*<sp/>t),</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>*<sp/>w1<sp/>*<sp/>std::cos(w1<sp/>*<sp/>t));</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Linear<sp/>Inertial<sp/>(World<sp/>Frame)<sp/>Acceleration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>Eigen::Vector3d<sp/>i_a(</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>-a<sp/>*<sp/>w2<sp/>*<sp/>w2<sp/>*<sp/>std::cos(w2<sp/>*<sp/>t),</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>-b<sp/>*<sp/>w1<sp/>*<sp/>w1<sp/>*<sp/>std::sin(w1<sp/>*<sp/>t),</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>-c<sp/>*<sp/>w1<sp/>*<sp/>w1<sp/>*<sp/>std::sin(w1<sp/>*<sp/>t));</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Linear<sp/>Inertial<sp/>(World<sp/>Frame)<sp/>Jerk</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>Eigen::Vector3d<sp/>i_j(</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>*<sp/>w2<sp/>*<sp/>w2<sp/>*<sp/>w2<sp/>*<sp/>std::sin(w2<sp/>*<sp/>t),</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>-b<sp/>*<sp/>w1<sp/>*<sp/>w1<sp/>*<sp/>w1<sp/>*<sp/>std::cos(w1<sp/>*<sp/>t),</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>-c<sp/>*<sp/>w1<sp/>*<sp/>w1<sp/>*<sp/>w1<sp/>*<sp/>std::cos(w1<sp/>*<sp/>t));</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Current<sp/>Orientation<sp/>(body<sp/>X<sp/>aligned<sp/>with<sp/>velocity)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>Eigen::Quaterniond<sp/>orientation;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>orientation.setFromTwoVectors(Eigen::Vector3d::UnitX(),<sp/>i_v.normalized());</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>orientation.normalize();</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Store<sp/>quaternion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>states[SIdx::Quaternion::W]<sp/>=<sp/>orientation.w();</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>states[SIdx::Quaternion::X]<sp/>=<sp/>orientation.x();</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>states[SIdx::Quaternion::Y]<sp/>=<sp/>orientation.y();</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>states[SIdx::Quaternion::Z]<sp/>=<sp/>orientation.z();</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Convert<sp/>world<sp/>velocity<sp/>to<sp/>body<sp/>frame</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>Eigen::Vector3d<sp/>b_v<sp/>=<sp/>orientation.inverse()<sp/>*<sp/>i_v;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>states.segment&lt;3&gt;(SIdx::LinearVelocity::Begin())<sp/>=<sp/>b_v;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>1.<sp/>Compute<sp/>angular<sp/>velocity<sp/>in<sp/>world<sp/>frame</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>Eigen::Vector3d<sp/>omega_world;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i_v.squaredNorm()<sp/>&gt;<sp/>1e-9)<sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>omega_world<sp/>=<sp/>i_v.cross(i_a)<sp/>/<sp/>i_v.squaredNorm();</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>omega_world.setZero();</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>2.<sp/>Transform<sp/>to<sp/>body<sp/>frame</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/>Eigen::Vector3d<sp/>omega_body<sp/>=<sp/>orientation.inverse()<sp/>*<sp/>omega_world;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/>states.segment&lt;3&gt;(SIdx::AngularVelocity::Begin())<sp/>=<sp/>omega_body;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>3.<sp/>Compute<sp/>body-frame<sp/>acceleration<sp/>PROPERLY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>Eigen::Vector3d<sp/>b_a<sp/>=<sp/>orientation.inverse()<sp/>*<sp/>i_a;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>b_a<sp/>-=<sp/>2<sp/>*<sp/>omega_body.cross(b_v);<sp/></highlight><highlight class="comment">//<sp/>Full<sp/>Coriolis<sp/>compensation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/>states.segment&lt;3&gt;(SIdx::LinearAcceleration::Begin())<sp/>=<sp/>b_a;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>4.<sp/>Angular<sp/>acceleration<sp/>(derivative<sp/>of<sp/>omega_world)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/>Eigen::Vector3d<sp/>alpha_world;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i_v.squaredNorm()<sp/>&gt;<sp/>1e-9)<sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>alpha_world<sp/>=<sp/>(i_v.cross(i_j)<sp/>*<sp/>i_v.squaredNorm()<sp/>-</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2<sp/>*<sp/>i_v.cross(i_a)<sp/>*<sp/>i_v.dot(i_a))</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/<sp/>(i_v.squaredNorm()<sp/>*<sp/>i_v.squaredNorm());</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>alpha_world.setZero();</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>5.<sp/>Transform<sp/>to<sp/>body<sp/>frame</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>Eigen::Vector3d<sp/>alpha_body<sp/>=<sp/>orientation.inverse()<sp/>*<sp/>alpha_world;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/>states.segment&lt;3&gt;(SIdx::AngularAcceleration::Begin())<sp/>=<sp/>alpha_body;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>6.<sp/>Extract<sp/>and<sp/>store<sp/>roll<sp/>rate<sp/>(rotation<sp/>about<sp/>body<sp/>X<sp/>axis)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>roll_rate<sp/>=<sp/>omega_body.dot(Eigen::Vector3d::UnitX());</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/>states[SIdx::AngularVelocity::X]<sp/>=<sp/>roll_rate;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>7.<sp/>Extract<sp/>and<sp/>store<sp/>roll<sp/>acceleration<sp/>(about<sp/>body<sp/>X<sp/>axis)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>roll_accel<sp/>=<sp/>alpha_body.dot(Eigen::Vector3d::UnitX());</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/>states[SIdx::AngularAcceleration::X]<sp/>=<sp/>roll_accel;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>states;</highlight></codeline>
<codeline lineno="134"><highlight class="normal">}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="comment">//<sp/>/**</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>*<sp/>@brief<sp/>Configuration<sp/>for<sp/>oscillating<sp/>trajectory<sp/>generation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="comment">//<sp/>struct<sp/>OscillatingConfig<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>Eigen::Vector3d<sp/>max_linear_accel<sp/>=<sp/>Eigen::Vector3d(10.0,<sp/>0.0,<sp/>0.0);<sp/>//<sp/>Max<sp/>linear<sp/>acceleration<sp/>(m/s^2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>Eigen::Vector3d<sp/>max_angular_accel<sp/>=<sp/>Eigen::Vector3d(0.0,<sp/>0.0,<sp/>0.0);<sp/>//<sp/>Max<sp/>angular<sp/>acceleration<sp/>(rad/s^2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>double<sp/>linear_time_period<sp/>=<sp/>0.5;<sp/><sp/>//<sp/>Time<sp/>period<sp/>for<sp/>linear<sp/>acceleration<sp/>phases<sp/>(seconds)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>double<sp/>angular_time_period<sp/>=<sp/>0.1;<sp/>//<sp/>Time<sp/>period<sp/>for<sp/>angular<sp/>acceleration<sp/>phases<sp/>(seconds)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="comment">//<sp/>};</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="comment">//<sp/>/**</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>*<sp/>@brief<sp/>Generates<sp/>an<sp/>oscillating<sp/>trajectory<sp/>for<sp/>testing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>*<sp/>Creates<sp/>a<sp/>trajectory<sp/>that<sp/>follows<sp/>an<sp/>acceleration<sp/>pattern:<sp/>0,<sp/>max,<sp/>-max,<sp/>0,<sp/>-max,<sp/>max.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>*<sp/>This<sp/>is<sp/>useful<sp/>for<sp/>testing<sp/>state<sp/>prediction,<sp/>control<sp/>models,<sp/>and<sp/>inertial<sp/>compensation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>*<sp/>@param<sp/>time<sp/>Current<sp/>time<sp/>in<sp/>seconds</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>*<sp/>@param<sp/>start_time<sp/>Starting<sp/>time<sp/>of<sp/>the<sp/>trajectory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>*<sp/>@param<sp/>config<sp/>Configuration<sp/>parameters<sp/>for<sp/>the<sp/>trajectory<sp/>(optional)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>*<sp/>@return<sp/>State<sp/>vector<sp/>containing<sp/>position,<sp/>orientation,<sp/>velocity,<sp/>and<sp/>acceleration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Eigen::Matrix&lt;double,<sp/>core::StateIndex::kFullStateSize,<sp/>1&gt;<sp/>OscillatingTrajectory(</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>double<sp/>time,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>double<sp/>start_time,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>const<sp/>OscillatingConfig&amp;<sp/>config<sp/>=<sp/>OscillatingConfig())<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>using<sp/>SIdx<sp/>=<sp/>core::StateIndex;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>using<sp/>StateVector<sp/>=<sp/>Eigen::Matrix&lt;double,<sp/>SIdx::kFullStateSize,<sp/>1&gt;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>//<sp/>Create<sp/>state<sp/>vector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>StateVector<sp/>states<sp/>=<sp/>StateVector::Zero();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>double<sp/>adjusted_time<sp/>=<sp/>time<sp/>-<sp/>start_time;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>//<sp/>Linear<sp/>Motion<sp/>Calculation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>const<sp/>double<sp/>phase_duration_lin<sp/>=<sp/>config.linear_time_period<sp/>/<sp/>5.0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>double<sp/>t_phase_lin<sp/>=<sp/>std::fmod(adjusted_time,<sp/>5<sp/>*<sp/>phase_duration_lin);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>for<sp/>(int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>3;<sp/>++i)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>double<sp/>pos<sp/>=<sp/>0.0,<sp/>vel<sp/>=<sp/>0.0,<sp/>acc<sp/>=<sp/>0.0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>if<sp/>(t_phase_lin<sp/>&lt;<sp/>phase_duration_lin)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>acc<sp/>=<sp/>0.0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>pos<sp/>=<sp/>0.0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>vel<sp/>=<sp/>0.0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>if<sp/>(t_phase_lin<sp/>&lt;<sp/>2<sp/>*<sp/>phase_duration_lin)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>acc<sp/>=<sp/>config.max_linear_accel[i];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>pos<sp/>=<sp/>0.5<sp/>*<sp/>acc<sp/>*<sp/>(t_phase_lin<sp/>-<sp/>phase_duration_lin)<sp/>*<sp/>(t_phase_lin<sp/>-<sp/>phase_duration_lin);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>vel<sp/>=<sp/>acc<sp/>*<sp/>(t_phase_lin<sp/>-<sp/>phase_duration_lin);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>if<sp/>(t_phase_lin<sp/>&lt;<sp/>3<sp/>*<sp/>phase_duration_lin)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>acc<sp/>=<sp/>-config.max_linear_accel[i];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>pos<sp/>=<sp/>acc<sp/>*<sp/>phase_duration_lin<sp/>*<sp/>(t_phase_lin<sp/>-<sp/>2<sp/>*<sp/>phase_duration_lin)<sp/>-</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.5<sp/>*<sp/>acc<sp/>*<sp/>(t_phase_lin<sp/>-<sp/>2<sp/>*<sp/>phase_duration_lin)<sp/>*<sp/>(t_phase_lin<sp/>-<sp/>2<sp/>*<sp/>phase_duration_lin);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>vel<sp/>=<sp/>acc<sp/>*<sp/>phase_duration_lin<sp/>-<sp/>acc<sp/>*<sp/>(t_phase_lin<sp/>-<sp/>2<sp/>*<sp/>phase_duration_lin);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>if<sp/>(t_phase_lin<sp/>&lt;<sp/>4<sp/>*<sp/>phase_duration_lin)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>acc<sp/>=<sp/>-config.max_linear_accel[i];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>pos<sp/>=<sp/>-0.5<sp/>*<sp/>acc<sp/>*<sp/>(t_phase_lin<sp/>-<sp/>3<sp/>*<sp/>phase_duration_lin)<sp/>*<sp/>(t_phase_lin<sp/>-<sp/>3<sp/>*<sp/>phase_duration_lin);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>vel<sp/>=<sp/>-acc<sp/>*<sp/>(t_phase_lin<sp/>-<sp/>3<sp/>*<sp/>phase_duration_lin);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>acc<sp/>=<sp/>config.max_linear_accel[i];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>pos<sp/>=<sp/>-acc<sp/>*<sp/>phase_duration_lin<sp/>*<sp/>(t_phase_lin<sp/>-<sp/>4<sp/>*<sp/>phase_duration_lin)<sp/>+</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.5<sp/>*<sp/>acc<sp/>*<sp/>(t_phase_lin<sp/>-<sp/>4<sp/>*<sp/>phase_duration_lin)<sp/>*<sp/>(t_phase_lin<sp/>-<sp/>4<sp/>*<sp/>phase_duration_lin);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>vel<sp/>=<sp/>-acc<sp/>*<sp/>phase_duration_lin<sp/>+<sp/>acc<sp/>*<sp/>(t_phase_lin<sp/>-<sp/>4<sp/>*<sp/>phase_duration_lin);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>states[SIdx::Position::Begin()<sp/>+<sp/>i]<sp/>=<sp/>pos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>states[SIdx::LinearVelocity::Begin()<sp/>+<sp/>i]<sp/>=<sp/>vel;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>states[SIdx::LinearAcceleration::Begin()<sp/>+<sp/>i]<sp/>=<sp/>acc;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>//<sp/>Angular<sp/>Motion<sp/>Calculation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>const<sp/>double<sp/>phase_duration_ang<sp/>=<sp/>config.angular_time_period<sp/>/<sp/>5.0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>double<sp/>t_phase_ang<sp/>=<sp/>std::fmod(adjusted_time,<sp/>5<sp/>*<sp/>phase_duration_ang);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>for<sp/>(int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>3;<sp/>++i)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>double<sp/>ang_pos<sp/>=<sp/>0.0,<sp/>ang_vel<sp/>=<sp/>0.0,<sp/>ang_acc<sp/>=<sp/>0.0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>if<sp/>(t_phase_ang<sp/>&lt;<sp/>phase_duration_ang)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>ang_acc<sp/>=<sp/>0.0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>ang_pos<sp/>=<sp/>0.0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>ang_vel<sp/>=<sp/>0.0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>if<sp/>(t_phase_ang<sp/>&lt;<sp/>2<sp/>*<sp/>phase_duration_ang)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>ang_acc<sp/>=<sp/>config.max_angular_accel[i];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>ang_pos<sp/>=<sp/>0.5<sp/>*<sp/>ang_acc<sp/>*<sp/>(t_phase_ang<sp/>-<sp/>phase_duration_ang)<sp/>*<sp/>(t_phase_ang<sp/>-<sp/>phase_duration_ang);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>ang_vel<sp/>=<sp/>ang_acc<sp/>*<sp/>(t_phase_ang<sp/>-<sp/>phase_duration_ang);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>if<sp/>(t_phase_ang<sp/>&lt;<sp/>3<sp/>*<sp/>phase_duration_ang)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>ang_acc<sp/>=<sp/>-config.max_angular_accel[i];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>ang_pos<sp/>=<sp/>ang_acc<sp/>*<sp/>phase_duration_ang<sp/>*<sp/>(t_phase_ang<sp/>-<sp/>2<sp/>*<sp/>phase_duration_ang)<sp/>-</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.5<sp/>*<sp/>ang_acc<sp/>*<sp/>(t_phase_ang<sp/>-<sp/>2<sp/>*<sp/>phase_duration_ang)<sp/>*<sp/>(t_phase_ang<sp/>-<sp/>2<sp/>*<sp/>phase_duration_ang);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>ang_vel<sp/>=<sp/>ang_acc<sp/>*<sp/>phase_duration_ang<sp/>-<sp/>ang_acc<sp/>*<sp/>(t_phase_ang<sp/>-<sp/>2<sp/>*<sp/>phase_duration_ang);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>if<sp/>(t_phase_ang<sp/>&lt;<sp/>4<sp/>*<sp/>phase_duration_ang)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>ang_acc<sp/>=<sp/>-config.max_angular_accel[i];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>ang_pos<sp/>=<sp/>-0.5<sp/>*<sp/>ang_acc<sp/>*<sp/>(t_phase_ang<sp/>-<sp/>3<sp/>*<sp/>phase_duration_ang)<sp/>*<sp/>(t_phase_ang<sp/>-<sp/>3<sp/>*<sp/>phase_duration_ang);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>ang_vel<sp/>=<sp/>-ang_acc<sp/>*<sp/>(t_phase_ang<sp/>-<sp/>3<sp/>*<sp/>phase_duration_ang);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>ang_acc<sp/>=<sp/>config.max_angular_accel[i];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>ang_pos<sp/>=<sp/>-ang_acc<sp/>*<sp/>phase_duration_ang<sp/>*<sp/>(t_phase_ang<sp/>-<sp/>4<sp/>*<sp/>phase_duration_ang)<sp/>+</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.5<sp/>*<sp/>ang_acc<sp/>*<sp/>(t_phase_ang<sp/>-<sp/>4<sp/>*<sp/>phase_duration_ang)<sp/>*<sp/>(t_phase_ang<sp/>-<sp/>4<sp/>*<sp/>phase_duration_ang);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>ang_vel<sp/>=<sp/>-ang_acc<sp/>*<sp/>phase_duration_ang<sp/>+<sp/>ang_acc<sp/>*<sp/>(t_phase_ang<sp/>-<sp/>4<sp/>*<sp/>phase_duration_ang);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>states[SIdx::AngularVelocity::Begin()<sp/>+<sp/>i]<sp/>=<sp/>ang_vel;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>states[SIdx::AngularAcceleration::Begin()<sp/>+<sp/>i]<sp/>=<sp/>ang_acc;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>return<sp/>states;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>utils</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>kinematic_arbiter</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/spencer/ros2workspace/src/kinematic_arbiter/include/kinematic_arbiter/core/trajectory_utils.hpp"/>
  </compounddef>
</doxygen>
