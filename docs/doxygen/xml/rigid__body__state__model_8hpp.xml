<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="rigid__body__state__model_8hpp" kind="file" language="C++">
    <compoundname>rigid_body_state_model.hpp</compoundname>
    <includes refid="state__model__interface_8hpp" local="yes">kinematic_arbiter/core/state_model_interface.hpp</includes>
    <includes refid="state__index_8hpp" local="yes">kinematic_arbiter/core/state_index.hpp</includes>
    <includes local="no">Eigen/Dense</includes>
    <includes local="no">Eigen/Geometry</includes>
    <includes local="no">cmath</includes>
    <includes local="no">limits</includes>
    <includedby refid="filter__wrapper_8hpp" local="yes">/home/spencer/ros2workspace/src/kinematic_arbiter/include/kinematic_arbiter/ros2/filter_wrapper.hpp</includedby>
    <includedby refid="kinematic__arbiter__node_8cpp" local="yes">/home/spencer/ros2workspace/src/kinematic_arbiter/src/ros2/kinematic_arbiter_node.cpp</includedby>
    <incdepgraph>
      <node id="5">
        <label>kinematic_arbiter/core/state_index.hpp</label>
        <link refid="state__index_8hpp"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>limits</label>
      </node>
      <node id="10">
        <label>Eigen/Geometry</label>
      </node>
      <node id="4">
        <label>cmath</label>
      </node>
      <node id="8">
        <label>string</label>
      </node>
      <node id="3">
        <label>Eigen/Dense</label>
      </node>
      <node id="7">
        <label>vector</label>
      </node>
      <node id="2">
        <label>kinematic_arbiter/core/state_model_interface.hpp</label>
        <link refid="state__model__interface_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>cstddef</label>
      </node>
      <node id="9">
        <label>unordered_map</label>
      </node>
      <node id="1">
        <label>/home/spencer/ros2workspace/src/kinematic_arbiter/include/kinematic_arbiter/models/rigid_body_state_model.hpp</label>
        <link refid="rigid__body__state__model_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="6">
        <label>/home/spencer/ros2workspace/src/kinematic_arbiter/src/ros2/filter_wrapper.cpp</label>
        <link refid="filter__wrapper_8cpp"/>
      </node>
      <node id="5">
        <label>/home/spencer/ros2workspace/src/kinematic_arbiter/src/ros2/main.cpp</label>
        <link refid="main_8cpp"/>
      </node>
      <node id="4">
        <label>/home/spencer/ros2workspace/src/kinematic_arbiter/src/ros2/kinematic_arbiter_node.cpp</label>
        <link refid="kinematic__arbiter__node_8cpp"/>
      </node>
      <node id="1">
        <label>/home/spencer/ros2workspace/src/kinematic_arbiter/include/kinematic_arbiter/models/rigid_body_state_model.hpp</label>
        <link refid="rigid__body__state__model_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>/home/spencer/ros2workspace/src/kinematic_arbiter/include/kinematic_arbiter/ros2/filter_wrapper.hpp</label>
        <link refid="filter__wrapper_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>/home/spencer/ros2workspace/src/kinematic_arbiter/include/kinematic_arbiter/ros2/kinematic_arbiter_node.hpp</label>
        <link refid="kinematic__arbiter__node_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="classkinematic__arbiter_1_1models_1_1RigidBodyStateModel" prot="public">kinematic_arbiter::models::RigidBodyStateModel</innerclass>
    <innernamespace refid="namespacekinematic__arbiter">kinematic_arbiter</innernamespace>
    <innernamespace refid="namespacekinematic__arbiter_1_1models">kinematic_arbiter::models</innernamespace>
    <innernamespace refid="namespacekinematic__arbiter_1_1models_1_1anonymous__namespace_02rigid__body__state__model_8hpp_03">kinematic_arbiter::models::anonymous_namespace{rigid_body_state_model.hpp}</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="state__model__interface_8hpp" kindref="compound">kinematic_arbiter/core/state_model_interface.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="state__index_8hpp" kindref="compound">kinematic_arbiter/core/state_index.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;Eigen/Dense&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;Eigen/Geometry&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacekinematic__arbiter" kindref="compound">kinematic_arbiter</ref><sp/>{</highlight></codeline>
<codeline lineno="11" refid="namespacekinematic__arbiter_1_1models" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">models<sp/>{</highlight></codeline>
<codeline lineno="12" refid="namespacekinematic__arbiter_1_1models_1_1anonymous__namespace_02rigid__body__state__model_8hpp_03" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="13" refid="namespacekinematic__arbiter_1_1models_1_1anonymous__namespace_02rigid__body__state__model_8hpp_03_1aa82dde35738c9d742fc6db2f0a57c44a" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacekinematic__arbiter_1_1models_1_1anonymous__namespace_02rigid__body__state__model_8hpp_03_1aa82dde35738c9d742fc6db2f0a57c44a" kindref="member">kLambda</ref><sp/>=<sp/>46.05;</highlight></codeline>
<codeline lineno="14"><highlight class="normal">}</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="30" refid="classkinematic__arbiter_1_1models_1_1RigidBodyStateModel" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classkinematic__arbiter_1_1models_1_1RigidBodyStateModel" kindref="compound">RigidBodyStateModel</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classkinematic__arbiter_1_1core_1_1StateModelInterface" kindref="compound">core::StateModelInterface</ref><sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Use<sp/>convenient<sp/>matrix/vector<sp/>aliases<sp/>for<sp/>3D/4D<sp/>operations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33" refid="classkinematic__arbiter_1_1models_1_1RigidBodyStateModel_1a94f655111a07c30be4b90ec40d595f97" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classkinematic__arbiter_1_1models_1_1RigidBodyStateModel_1a94f655111a07c30be4b90ec40d595f97" kindref="member">Matrix3d</ref><sp/>=<sp/>Eigen::Matrix&lt;double,<sp/>3,<sp/>3&gt;;</highlight></codeline>
<codeline lineno="34" refid="classkinematic__arbiter_1_1models_1_1RigidBodyStateModel_1a6e7f6163aa8eefec8d398341e9eeaaad" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classkinematic__arbiter_1_1core_1_1StateModelInterface_1af47babdcc2441df1e20ce0e1dcf083d3" kindref="member">Vector3d</ref><sp/>=<sp/>Eigen::Vector3d;</highlight></codeline>
<codeline lineno="35" refid="classkinematic__arbiter_1_1models_1_1RigidBodyStateModel_1aa9a3c8f16a5313e3e6c1afc2ba67666b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classkinematic__arbiter_1_1models_1_1RigidBodyStateModel_1aa9a3c8f16a5313e3e6c1afc2ba67666b" kindref="member">Vector4d</ref><sp/>=<sp/>Eigen::Vector4d;</highlight></codeline>
<codeline lineno="36" refid="classkinematic__arbiter_1_1models_1_1RigidBodyStateModel_1a63783d35b06bb216927e8422c8143097" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classkinematic__arbiter_1_1models_1_1RigidBodyStateModel_1a63783d35b06bb216927e8422c8143097" kindref="member">Matrix4d</ref><sp/>=<sp/>Eigen::Matrix&lt;double,<sp/>4,<sp/>4&gt;;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Type<sp/>alias<sp/>for<sp/>cleaner<sp/>access<sp/>to<sp/>state<sp/>indices</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39" refid="classkinematic__arbiter_1_1models_1_1RigidBodyStateModel_1aa315b72df6366b9b7fd631a38e1ec526" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structkinematic__arbiter_1_1core_1_1StateIndex" kindref="compound">SIdx</ref><sp/>=<sp/><ref refid="structkinematic__arbiter_1_1core_1_1StateIndex" kindref="compound">core::StateIndex</ref>;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="45" refid="classkinematic__arbiter_1_1models_1_1RigidBodyStateModel_1ae5b004980ce188891ea33a30e875e2c7" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classkinematic__arbiter_1_1models_1_1RigidBodyStateModel_1ae5b004980ce188891ea33a30e875e2c7" kindref="member">RigidBodyStateModel</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structkinematic__arbiter_1_1core_1_1StateModelInterface_1_1Params" kindref="compound">Params</ref>&amp;<sp/>params<sp/>=<sp/><ref refid="structkinematic__arbiter_1_1core_1_1StateModelInterface_1_1Params" kindref="compound">Params</ref>())</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>core::<ref refid="classkinematic__arbiter_1_1core_1_1StateModelInterface_1aa66fe5b173bd89acfa2e81151a9b0226" kindref="member">StateModelInterface</ref>(params)<sp/>{}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="55" refid="classkinematic__arbiter_1_1models_1_1RigidBodyStateModel_1a5c20315ad9946aee82af907393333f06" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classkinematic__arbiter_1_1core_1_1StateModelInterface_1aa727c87965ff75514c4e097c6456905b" kindref="member">StateVector</ref><sp/><ref refid="classkinematic__arbiter_1_1models_1_1RigidBodyStateModel_1a5c20315ad9946aee82af907393333f06" kindref="member">PredictState</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classkinematic__arbiter_1_1core_1_1StateModelInterface_1aa727c87965ff75514c4e097c6456905b" kindref="member">StateVector</ref>&amp;<sp/>current_state,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>time_step)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classkinematic__arbiter_1_1core_1_1StateModelInterface_1aa727c87965ff75514c4e097c6456905b" kindref="member">StateVector</ref><sp/>new_states<sp/>=<sp/>current_state;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(time_step)<sp/>&lt;=<sp/>std::numeric_limits&lt;double&gt;::epsilon())<sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>new_states;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Extract<sp/>quaternion<sp/>and<sp/>normalize</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Quaterniond<sp/>orientation(</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>current_state[<ref refid="structkinematic__arbiter_1_1core_1_1StateIndex_1_1Quaternion_1a974ce211cf31eba33fd4a89c0706432f" kindref="member">SIdx::Quaternion::W</ref>],</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>current_state[<ref refid="structkinematic__arbiter_1_1core_1_1StateIndex_1_1Quaternion_1a16846a86810c4a3c7b1651bd10586cfe" kindref="member">SIdx::Quaternion::X</ref>],</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>current_state[<ref refid="structkinematic__arbiter_1_1core_1_1StateIndex_1_1Quaternion_1af1d78b2f18147bf1abec5a47d984e63c" kindref="member">SIdx::Quaternion::Y</ref>],</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>current_state[<ref refid="structkinematic__arbiter_1_1core_1_1StateIndex_1_1Quaternion_1a8a8ad785fbd7f06509eae6b27b7d20c9" kindref="member">SIdx::Quaternion::Z</ref>]</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>orientation.normalize();</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>rotation<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classkinematic__arbiter_1_1models_1_1RigidBodyStateModel_1a94f655111a07c30be4b90ec40d595f97" kindref="member">Matrix3d</ref><sp/>rotation_matrix_b_to_w<sp/>=<sp/>orientation.toRotationMatrix();</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Extract<sp/>velocity<sp/>and<sp/>acceleration<sp/>components</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classkinematic__arbiter_1_1core_1_1StateModelInterface_1af47babdcc2441df1e20ce0e1dcf083d3" kindref="member">Vector3d</ref><sp/>linear_velocity<sp/>=</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>current_state.segment&lt;3&gt;(<ref refid="structkinematic__arbiter_1_1core_1_1StateIndex_1_1LinearVelocity_1a90f46140a68776dac322db5def8ef932" kindref="member">SIdx::LinearVelocity::Begin</ref>());</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classkinematic__arbiter_1_1core_1_1StateModelInterface_1af47babdcc2441df1e20ce0e1dcf083d3" kindref="member">Vector3d</ref><sp/>angular_velocity<sp/>=</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>current_state.segment&lt;3&gt;(<ref refid="structkinematic__arbiter_1_1core_1_1StateIndex_1_1AngularVelocity_1a582fc5f2b58d312404f599b8d00afa71" kindref="member">SIdx::AngularVelocity::Begin</ref>());</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classkinematic__arbiter_1_1core_1_1StateModelInterface_1af47babdcc2441df1e20ce0e1dcf083d3" kindref="member">Vector3d</ref><sp/>linear_acceleration<sp/>=</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>current_state.segment&lt;3&gt;(<ref refid="structkinematic__arbiter_1_1core_1_1StateIndex_1_1LinearAcceleration_1abcde4fc83b04286fb93abd48826b54fe" kindref="member">SIdx::LinearAcceleration::Begin</ref>());</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classkinematic__arbiter_1_1core_1_1StateModelInterface_1af47babdcc2441df1e20ce0e1dcf083d3" kindref="member">Vector3d</ref><sp/>angular_acceleration<sp/>=</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>current_state.segment&lt;3&gt;(<ref refid="structkinematic__arbiter_1_1core_1_1StateIndex_1_1AngularAcceleration_1aba70ff56c29cff8b0cd60ddd365d093f" kindref="member">SIdx::AngularAcceleration::Begin</ref>());</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Linear<sp/>XYZ<sp/>Position<sp/>Prediction<sp/>Model</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>new_states.segment&lt;3&gt;(<ref refid="structkinematic__arbiter_1_1core_1_1StateIndex_1_1Position_1aefacc52dcba77933043b3802b5b749ae" kindref="member">SIdx::Position::Begin</ref>())<sp/>+=</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rotation_matrix_b_to_w<sp/>*<sp/>((linear_velocity<sp/>+<sp/>time_step<sp/>*<sp/>0.5<sp/>*<sp/>linear_acceleration)<sp/>*<sp/>time_step);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Angular<sp/>Position<sp/>(Quaternion)<sp/>Prediction<sp/>Model</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Use<sp/>quaternion<sp/>kinematics<sp/>with<sp/>angular<sp/>acceleration:<sp/>q(t+dt)<sp/>=<sp/>exp(0.5*ω*dt<sp/>+<sp/>0.25*ω̇*dt²)<sp/>*<sp/>q(t)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Quaterniond<sp/>delta_q;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>combined<sp/>angular<sp/>motion<sp/>vector<sp/>v<sp/>=<sp/>0.5*ω*dt<sp/>+<sp/>0.25*ω̇*dt²</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>the<sp/>same<sp/>vector<sp/>used<sp/>in<sp/>the<sp/>quaternion<sp/>update:<sp/>q(t+dt)<sp/>=<sp/>exp(v)<sp/>*<sp/>q(t)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t<sp/>=<sp/>time_step;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classkinematic__arbiter_1_1core_1_1StateModelInterface_1af47babdcc2441df1e20ce0e1dcf083d3" kindref="member">Vector3d</ref><sp/>combined_angular_motion<sp/>=<sp/>angular_velocity<sp/>*<sp/>t<sp/>+<sp/>0.5<sp/>*<sp/>angular_acceleration<sp/>*<sp/>t<sp/>*<sp/>t;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>motion_norm<sp/>=<sp/>combined_angular_motion.norm();</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(motion_norm<sp/>&gt;<sp/>std::numeric_limits&lt;double&gt;::min())<sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classkinematic__arbiter_1_1core_1_1StateModelInterface_1af47babdcc2441df1e20ce0e1dcf083d3" kindref="member">Vector3d</ref><sp/>axis<sp/>=<sp/>combined_angular_motion<sp/>/<sp/>motion_norm;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>angle<sp/>=<sp/>motion_norm;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>delta_q<sp/>=<sp/>Eigen::Quaterniond(Eigen::AngleAxisd(angle,<sp/>axis));</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>delta_q<sp/>=<sp/>Eigen::Quaterniond::Identity();</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Quaterniond<sp/>new_quaternion<sp/>=<sp/>delta_q<sp/>*<sp/>orientation;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>new_quaternion.normalize();</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>new_states[<ref refid="structkinematic__arbiter_1_1core_1_1StateIndex_1_1Quaternion_1a974ce211cf31eba33fd4a89c0706432f" kindref="member">SIdx::Quaternion::W</ref>]<sp/>=<sp/>new_quaternion.w();</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>new_states[<ref refid="structkinematic__arbiter_1_1core_1_1StateIndex_1_1Quaternion_1a16846a86810c4a3c7b1651bd10586cfe" kindref="member">SIdx::Quaternion::X</ref>]<sp/>=<sp/>new_quaternion.x();</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>new_states[<ref refid="structkinematic__arbiter_1_1core_1_1StateIndex_1_1Quaternion_1af1d78b2f18147bf1abec5a47d984e63c" kindref="member">SIdx::Quaternion::Y</ref>]<sp/>=<sp/>new_quaternion.y();</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>new_states[<ref refid="structkinematic__arbiter_1_1core_1_1StateIndex_1_1Quaternion_1a8a8ad785fbd7f06509eae6b27b7d20c9" kindref="member">SIdx::Quaternion::Z</ref>]<sp/>=<sp/>new_quaternion.z();</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Velocity<sp/>prediction<sp/>(integrate<sp/>acceleration)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>new_states.segment&lt;3&gt;(<ref refid="structkinematic__arbiter_1_1core_1_1StateIndex_1_1LinearVelocity_1a90f46140a68776dac322db5def8ef932" kindref="member">SIdx::LinearVelocity::Begin</ref>())<sp/>+=<sp/>time_step<sp/>*<sp/>linear_acceleration;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>new_states.segment&lt;3&gt;(<ref refid="structkinematic__arbiter_1_1core_1_1StateIndex_1_1AngularVelocity_1a582fc5f2b58d312404f599b8d00afa71" kindref="member">SIdx::AngularVelocity::Begin</ref>())<sp/>+=<sp/>time_step<sp/>*<sp/>angular_acceleration;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Acceleration<sp/>is<sp/>modelled<sp/>as<sp/>exponential<sp/>decay:<sp/>a(t+dt)<sp/>=<sp/>a(t)<sp/>*<sp/>exp(-lambda<sp/>*<sp/>dt)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>With<sp/>lambda<sp/>=<sp/>46.05,<sp/>acceleration<sp/>decays<sp/>to<sp/>near<sp/>zero<sp/>within<sp/>0.1s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>new_states.segment&lt;3&gt;(<ref refid="structkinematic__arbiter_1_1core_1_1StateIndex_1_1LinearAcceleration_1abcde4fc83b04286fb93abd48826b54fe" kindref="member">SIdx::LinearAcceleration::Begin</ref>())<sp/>=</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>linear_acceleration<sp/>*<sp/>std::exp(-<ref refid="namespacekinematic__arbiter_1_1models_1_1anonymous__namespace_02rigid__body__state__model_8hpp_03_1aa82dde35738c9d742fc6db2f0a57c44a" kindref="member">kLambda</ref><sp/>*<sp/>time_step);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>new_states.segment&lt;3&gt;(<ref refid="structkinematic__arbiter_1_1core_1_1StateIndex_1_1AngularAcceleration_1aba70ff56c29cff8b0cd60ddd365d093f" kindref="member">SIdx::AngularAcceleration::Begin</ref>())<sp/>=</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>angular_acceleration<sp/>*<sp/>std::exp(-<ref refid="namespacekinematic__arbiter_1_1models_1_1anonymous__namespace_02rigid__body__state__model_8hpp_03_1aa82dde35738c9d742fc6db2f0a57c44a" kindref="member">kLambda</ref><sp/>*<sp/>time_step);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>new_states;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="140" refid="classkinematic__arbiter_1_1models_1_1RigidBodyStateModel_1a998e9b62772caea5fc4a44858f201598" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classkinematic__arbiter_1_1core_1_1StateModelInterface_1a1eff680285d455bb828d1f94ea67c30d" kindref="member">StateMatrix</ref><sp/><ref refid="classkinematic__arbiter_1_1models_1_1RigidBodyStateModel_1a998e9b62772caea5fc4a44858f201598" kindref="member">GetTransitionMatrix</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classkinematic__arbiter_1_1core_1_1StateModelInterface_1aa727c87965ff75514c4e097c6456905b" kindref="member">StateVector</ref>&amp;<sp/>current_state,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>time_step)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(time_step)<sp/>&lt;=<sp/>std::numeric_limits&lt;double&gt;::epsilon())<sp/>{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>StateMatrix::Identity();</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classkinematic__arbiter_1_1core_1_1StateModelInterface_1a1eff680285d455bb828d1f94ea67c30d" kindref="member">StateMatrix</ref><sp/>jacobian<sp/>=<sp/>StateMatrix::Zero();</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Extract<sp/>quaternion<sp/>and<sp/>normalize</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Quaterniond<sp/>orientation(</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>current_state[<ref refid="structkinematic__arbiter_1_1core_1_1StateIndex_1_1Quaternion_1a974ce211cf31eba33fd4a89c0706432f" kindref="member">SIdx::Quaternion::W</ref>],</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>current_state[<ref refid="structkinematic__arbiter_1_1core_1_1StateIndex_1_1Quaternion_1a16846a86810c4a3c7b1651bd10586cfe" kindref="member">SIdx::Quaternion::X</ref>],</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>current_state[<ref refid="structkinematic__arbiter_1_1core_1_1StateIndex_1_1Quaternion_1af1d78b2f18147bf1abec5a47d984e63c" kindref="member">SIdx::Quaternion::Y</ref>],</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>current_state[<ref refid="structkinematic__arbiter_1_1core_1_1StateIndex_1_1Quaternion_1a8a8ad785fbd7f06509eae6b27b7d20c9" kindref="member">SIdx::Quaternion::Z</ref>]</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>orientation.normalize();</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>rotation<sp/>matrix<sp/>(world<sp/>to<sp/>body<sp/>frame)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classkinematic__arbiter_1_1models_1_1RigidBodyStateModel_1a94f655111a07c30be4b90ec40d595f97" kindref="member">Matrix3d</ref><sp/>rotation_matrix_w_to_b<sp/>=<sp/>orientation.toRotationMatrix().transpose();</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Position<sp/>block<sp/>-<sp/>identity<sp/>for<sp/>position<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>jacobian.block&lt;3,3&gt;(<ref refid="structkinematic__arbiter_1_1core_1_1StateIndex_1_1Position_1aefacc52dcba77933043b3802b5b749ae" kindref="member">SIdx::Position::Begin</ref>(),<sp/><ref refid="structkinematic__arbiter_1_1core_1_1StateIndex_1_1Position_1aefacc52dcba77933043b3802b5b749ae" kindref="member">SIdx::Position::Begin</ref>())<sp/>=</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Matrix3d::Identity();</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Position<sp/>wrt<sp/>linear<sp/>velocity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>jacobian.block&lt;3,3&gt;(<ref refid="structkinematic__arbiter_1_1core_1_1StateIndex_1_1Position_1aefacc52dcba77933043b3802b5b749ae" kindref="member">SIdx::Position::Begin</ref>(),<sp/><ref refid="structkinematic__arbiter_1_1core_1_1StateIndex_1_1LinearVelocity_1a90f46140a68776dac322db5def8ef932" kindref="member">SIdx::LinearVelocity::Begin</ref>())<sp/>=</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rotation_matrix_w_to_b<sp/>*<sp/>(time_step<sp/>*<sp/>Matrix3d::Identity());</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Position<sp/>wrt<sp/>linear<sp/>acceleration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>jacobian.block&lt;3,3&gt;(<ref refid="structkinematic__arbiter_1_1core_1_1StateIndex_1_1Position_1aefacc52dcba77933043b3802b5b749ae" kindref="member">SIdx::Position::Begin</ref>(),<sp/><ref refid="structkinematic__arbiter_1_1core_1_1StateIndex_1_1LinearAcceleration_1abcde4fc83b04286fb93abd48826b54fe" kindref="member">SIdx::LinearAcceleration::Begin</ref>())<sp/>=</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rotation_matrix_w_to_b<sp/>*<sp/>(time_step<sp/>*<sp/>time_step<sp/>*<sp/>0.5<sp/>*<sp/>Matrix3d::Identity());</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Remove<sp/>coupling<sp/>between<sp/>linear<sp/>and<sp/>angular<sp/>position<sp/>in<sp/>the<sp/>jacobian<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>setting<sp/>to<sp/>zero.<sp/>Derivation<sp/>of<sp/>partial<sp/>of<sp/>position<sp/>with<sp/>respect<sp/>to<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>rotation<sp/>in<sp/>quaternion<sp/>form<sp/>can<sp/>be<sp/>found<sp/>here:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>http://www.iri.upc.edu/people/jsola/JoanSola/objectes/notes/kinematics.pdf</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>jacobian.block&lt;3,4&gt;(<ref refid="structkinematic__arbiter_1_1core_1_1StateIndex_1_1Position_1aefacc52dcba77933043b3802b5b749ae" kindref="member">SIdx::Position::Begin</ref>(),<sp/><ref refid="structkinematic__arbiter_1_1core_1_1StateIndex_1_1Quaternion_1af3e01b65049a657408ba89e583c1e5ca" kindref="member">SIdx::Quaternion::Begin</ref>())<sp/>=</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Matrix&lt;double,<sp/>3,<sp/>4&gt;::Zero();</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Quaternion<sp/>self-propagation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>jacobian.block&lt;4,4&gt;(<ref refid="structkinematic__arbiter_1_1core_1_1StateIndex_1_1Quaternion_1af3e01b65049a657408ba89e583c1e5ca" kindref="member">SIdx::Quaternion::Begin</ref>(),<sp/><ref refid="structkinematic__arbiter_1_1core_1_1StateIndex_1_1Quaternion_1af3e01b65049a657408ba89e583c1e5ca" kindref="member">SIdx::Quaternion::Begin</ref>())<sp/>=</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Matrix4d::Identity();</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Extract<sp/>angular<sp/>velocity<sp/>and<sp/>acceleration<sp/>components</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classkinematic__arbiter_1_1core_1_1StateModelInterface_1af47babdcc2441df1e20ce0e1dcf083d3" kindref="member">Vector3d</ref><sp/>angular_velocity<sp/>=</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>current_state.segment&lt;3&gt;(<ref refid="structkinematic__arbiter_1_1core_1_1StateIndex_1_1AngularVelocity_1a582fc5f2b58d312404f599b8d00afa71" kindref="member">SIdx::AngularVelocity::Begin</ref>());</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classkinematic__arbiter_1_1core_1_1StateModelInterface_1af47babdcc2441df1e20ce0e1dcf083d3" kindref="member">Vector3d</ref><sp/>angular_acceleration<sp/>=</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>current_state.segment&lt;3&gt;(<ref refid="structkinematic__arbiter_1_1core_1_1StateIndex_1_1AngularAcceleration_1aba70ff56c29cff8b0cd60ddd365d093f" kindref="member">SIdx::AngularAcceleration::Begin</ref>());</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>combined<sp/>angular<sp/>motion<sp/>vector<sp/>v<sp/>=<sp/>0.5*ω*dt<sp/>+<sp/>0.25*ω̇*dt²</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>the<sp/>same<sp/>vector<sp/>used<sp/>in<sp/>the<sp/>quaternion<sp/>update:<sp/>q(t+dt)<sp/>=<sp/>exp(v)<sp/>*<sp/>q(t)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t<sp/>=<sp/>time_step;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classkinematic__arbiter_1_1core_1_1StateModelInterface_1af47babdcc2441df1e20ce0e1dcf083d3" kindref="member">Vector3d</ref><sp/>combined_angular_motion<sp/>=<sp/>angular_velocity<sp/>*<sp/>t<sp/>+<sp/>0.5<sp/>*<sp/>angular_acceleration<sp/>*<sp/>t<sp/>*<sp/>t;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>motion_norm<sp/>=<sp/>combined_angular_motion.norm();</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Jacobian<sp/>terms<sp/>for<sp/>quaternion<sp/>derivatives<sp/>with<sp/>respect<sp/>to<sp/>angular<sp/>velocity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>∂q/∂ω<sp/>≈<sp/>(t/2)*I<sp/>-<sp/>higher<sp/>order<sp/>correction<sp/>terms</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classkinematic__arbiter_1_1models_1_1RigidBodyStateModel_1a94f655111a07c30be4b90ec40d595f97" kindref="member">Matrix3d</ref><sp/>velocity_term<sp/>=<sp/>(t/2.0)<sp/>*<sp/>Matrix3d::Identity();</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Jacobian<sp/>terms<sp/>for<sp/>quaternion<sp/>derivatives<sp/>with<sp/>respect<sp/>to<sp/>angular<sp/>acceleration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>∂q/∂ω̇<sp/>≈<sp/>(t²/4)*I<sp/>-<sp/>higher<sp/>order<sp/>correction<sp/>terms</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classkinematic__arbiter_1_1models_1_1RigidBodyStateModel_1a94f655111a07c30be4b90ec40d595f97" kindref="member">Matrix3d</ref><sp/>accel_term<sp/>=<sp/>(t*t/4.0)<sp/>*<sp/>Matrix3d::Identity();</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Apply<sp/>correction<sp/>terms<sp/>when<sp/>motion<sp/>is<sp/>non-zero</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(motion_norm<sp/>&gt;<sp/>std::numeric_limits&lt;double&gt;::min())<sp/>{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>outer<sp/>product<sp/>correction<sp/>based<sp/>on<sp/>combined<sp/>motion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>comes<sp/>from<sp/>the<sp/>derivative<sp/>of<sp/>the<sp/>exponential<sp/>map</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classkinematic__arbiter_1_1models_1_1RigidBodyStateModel_1a94f655111a07c30be4b90ec40d595f97" kindref="member">Matrix3d</ref><sp/>outer_product_correction<sp/>=<sp/>(combined_angular_motion<sp/>*<sp/>combined_angular_motion.transpose())<sp/>/</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(motion_norm<sp/>*<sp/>motion_norm);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Scale<sp/>for<sp/>velocity:<sp/>(t³*||v||)/16<sp/>*<sp/>(v*v^T/||v||²)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classkinematic__arbiter_1_1models_1_1RigidBodyStateModel_1a94f655111a07c30be4b90ec40d595f97" kindref="member">Matrix3d</ref><sp/>velocity_correction<sp/>=<sp/>(t*t*t<sp/>*<sp/>motion_norm<sp/>/<sp/>16.0)<sp/>*<sp/>outer_product_correction;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Scale<sp/>for<sp/>acceleration:<sp/>(t⁴*||v||)/32<sp/>*<sp/>(v*v^T/||v||²)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classkinematic__arbiter_1_1models_1_1RigidBodyStateModel_1a94f655111a07c30be4b90ec40d595f97" kindref="member">Matrix3d</ref><sp/>accel_correction<sp/>=<sp/>(t*t*t*t<sp/>*<sp/>motion_norm<sp/>/<sp/>32.0)<sp/>*<sp/>outer_product_correction;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>velocity_term<sp/>-=<sp/>velocity_correction;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>accel_term<sp/>-=<sp/>accel_correction;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>quaternion<sp/>derivatives<sp/>for<sp/>angular<sp/>velocity<sp/>components</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Format:<sp/>[scalar_part,<sp/>vector_part_x,<sp/>vector_part_y,<sp/>vector_part_z]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classkinematic__arbiter_1_1models_1_1RigidBodyStateModel_1aa9a3c8f16a5313e3e6c1afc2ba67666b" kindref="member">Vector4d</ref><sp/>dq_dx(</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-0.25<sp/>*<sp/>t<sp/>*<sp/>combined_angular_motion[0],<sp/><sp/></highlight><highlight class="comment">//<sp/>Scalar<sp/>part<sp/>derivative</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>velocity_term(0,0),<sp/>velocity_term(0,1),<sp/>velocity_term(0,2)<sp/><sp/></highlight><highlight class="comment">//<sp/>Vector<sp/>part<sp/>derivatives</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classkinematic__arbiter_1_1models_1_1RigidBodyStateModel_1aa9a3c8f16a5313e3e6c1afc2ba67666b" kindref="member">Vector4d</ref><sp/>dq_dy(</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-0.25<sp/>*<sp/>t<sp/>*<sp/>combined_angular_motion[1],</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>velocity_term(1,0),<sp/>velocity_term(1,1),<sp/>velocity_term(1,2)</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classkinematic__arbiter_1_1models_1_1RigidBodyStateModel_1aa9a3c8f16a5313e3e6c1afc2ba67666b" kindref="member">Vector4d</ref><sp/>dq_dz(</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-0.25<sp/>*<sp/>t<sp/>*<sp/>combined_angular_motion[2],</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>velocity_term(2,0),<sp/>velocity_term(2,1),<sp/>velocity_term(2,2)</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>Jacobian<sp/>block<sp/>for<sp/>quaternion<sp/>wrt<sp/>angular<sp/>velocity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>jacobian.block&lt;4,1&gt;(<ref refid="structkinematic__arbiter_1_1core_1_1StateIndex_1_1Quaternion_1af3e01b65049a657408ba89e583c1e5ca" kindref="member">SIdx::Quaternion::Begin</ref>(),<sp/><ref refid="structkinematic__arbiter_1_1core_1_1StateIndex_1_1AngularVelocity_1ab5079ed794f17df901a6199dc51d9da8" kindref="member">SIdx::AngularVelocity::X</ref>)<sp/>=<sp/>dq_dx;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>jacobian.block&lt;4,1&gt;(<ref refid="structkinematic__arbiter_1_1core_1_1StateIndex_1_1Quaternion_1af3e01b65049a657408ba89e583c1e5ca" kindref="member">SIdx::Quaternion::Begin</ref>(),<sp/><ref refid="structkinematic__arbiter_1_1core_1_1StateIndex_1_1AngularVelocity_1a6a36392e699a5d9c1fa1aa81a630796a" kindref="member">SIdx::AngularVelocity::Y</ref>)<sp/>=<sp/>dq_dy;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>jacobian.block&lt;4,1&gt;(<ref refid="structkinematic__arbiter_1_1core_1_1StateIndex_1_1Quaternion_1af3e01b65049a657408ba89e583c1e5ca" kindref="member">SIdx::Quaternion::Begin</ref>(),<sp/><ref refid="structkinematic__arbiter_1_1core_1_1StateIndex_1_1AngularVelocity_1a21bf3e25ae81f3cfef8d9d0e6b12fcfb" kindref="member">SIdx::AngularVelocity::Z</ref>)<sp/>=<sp/>dq_dz;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>quaternion<sp/>derivatives<sp/>for<sp/>angular<sp/>acceleration<sp/>components</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Format:<sp/>[scalar_part,<sp/>vector_part_x,<sp/>vector_part_y,<sp/>vector_part_z]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classkinematic__arbiter_1_1models_1_1RigidBodyStateModel_1aa9a3c8f16a5313e3e6c1afc2ba67666b" kindref="member">Vector4d</ref><sp/>dq_dax(</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-0.125<sp/>*<sp/>t<sp/>*<sp/>t<sp/>*<sp/>combined_angular_motion[0],<sp/><sp/></highlight><highlight class="comment">//<sp/>Scalar<sp/>part<sp/>derivative</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>accel_term(0,0),<sp/>accel_term(0,1),<sp/>accel_term(0,2)<sp/><sp/></highlight><highlight class="comment">//<sp/>Vector<sp/>part<sp/>derivatives</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classkinematic__arbiter_1_1models_1_1RigidBodyStateModel_1aa9a3c8f16a5313e3e6c1afc2ba67666b" kindref="member">Vector4d</ref><sp/>dq_day(</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-0.125<sp/>*<sp/>t<sp/>*<sp/>t<sp/>*<sp/>combined_angular_motion[1],</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>accel_term(1,0),<sp/>accel_term(1,1),<sp/>accel_term(1,2)</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classkinematic__arbiter_1_1models_1_1RigidBodyStateModel_1aa9a3c8f16a5313e3e6c1afc2ba67666b" kindref="member">Vector4d</ref><sp/>dq_daz(</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-0.125<sp/>*<sp/>t<sp/>*<sp/>t<sp/>*<sp/>combined_angular_motion[2],</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>accel_term(2,0),<sp/>accel_term(2,1),<sp/>accel_term(2,2)</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>Jacobian<sp/>block<sp/>for<sp/>quaternion<sp/>wrt<sp/>angular<sp/>acceleration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>jacobian.block&lt;4,1&gt;(<ref refid="structkinematic__arbiter_1_1core_1_1StateIndex_1_1Quaternion_1af3e01b65049a657408ba89e583c1e5ca" kindref="member">SIdx::Quaternion::Begin</ref>(),<sp/><ref refid="structkinematic__arbiter_1_1core_1_1StateIndex_1_1AngularAcceleration_1ad54f3ad255cbacc2ad29b7c97a3f1f5a" kindref="member">SIdx::AngularAcceleration::X</ref>)<sp/>=<sp/>dq_dax;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>jacobian.block&lt;4,1&gt;(<ref refid="structkinematic__arbiter_1_1core_1_1StateIndex_1_1Quaternion_1af3e01b65049a657408ba89e583c1e5ca" kindref="member">SIdx::Quaternion::Begin</ref>(),<sp/><ref refid="structkinematic__arbiter_1_1core_1_1StateIndex_1_1AngularAcceleration_1aaea479bb5c69487e92133f7a53b295e6" kindref="member">SIdx::AngularAcceleration::Y</ref>)<sp/>=<sp/>dq_day;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>jacobian.block&lt;4,1&gt;(<ref refid="structkinematic__arbiter_1_1core_1_1StateIndex_1_1Quaternion_1af3e01b65049a657408ba89e583c1e5ca" kindref="member">SIdx::Quaternion::Begin</ref>(),<sp/><ref refid="structkinematic__arbiter_1_1core_1_1StateIndex_1_1AngularAcceleration_1a6d5582b4588663cb994a2d751e68badf" kindref="member">SIdx::AngularAcceleration::Z</ref>)<sp/>=<sp/>dq_daz;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Velocity<sp/>blocks<sp/>-<sp/>identity<sp/>for<sp/>velocity<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>jacobian.block&lt;3,3&gt;(<ref refid="structkinematic__arbiter_1_1core_1_1StateIndex_1_1LinearVelocity_1a90f46140a68776dac322db5def8ef932" kindref="member">SIdx::LinearVelocity::Begin</ref>(),<sp/><ref refid="structkinematic__arbiter_1_1core_1_1StateIndex_1_1LinearVelocity_1a90f46140a68776dac322db5def8ef932" kindref="member">SIdx::LinearVelocity::Begin</ref>())<sp/>=</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Matrix3d::Identity();</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Linear<sp/>velocity<sp/>wrt<sp/>linear<sp/>acceleration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>jacobian.block&lt;3,3&gt;(<ref refid="structkinematic__arbiter_1_1core_1_1StateIndex_1_1LinearVelocity_1a90f46140a68776dac322db5def8ef932" kindref="member">SIdx::LinearVelocity::Begin</ref>(),<sp/><ref refid="structkinematic__arbiter_1_1core_1_1StateIndex_1_1LinearAcceleration_1abcde4fc83b04286fb93abd48826b54fe" kindref="member">SIdx::LinearAcceleration::Begin</ref>())<sp/>=</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>time_step<sp/>*<sp/>Matrix3d::Identity();</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Angular<sp/>velocity<sp/>blocks<sp/>-<sp/>identity<sp/>for<sp/>angular<sp/>velocity<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>jacobian.block&lt;3,3&gt;(<ref refid="structkinematic__arbiter_1_1core_1_1StateIndex_1_1AngularVelocity_1a582fc5f2b58d312404f599b8d00afa71" kindref="member">SIdx::AngularVelocity::Begin</ref>(),<sp/><ref refid="structkinematic__arbiter_1_1core_1_1StateIndex_1_1AngularVelocity_1a582fc5f2b58d312404f599b8d00afa71" kindref="member">SIdx::AngularVelocity::Begin</ref>())<sp/>=</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Matrix3d::Identity();</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Angular<sp/>velocity<sp/>wrt<sp/>angular<sp/>acceleration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>jacobian.block&lt;3,3&gt;(<ref refid="structkinematic__arbiter_1_1core_1_1StateIndex_1_1AngularVelocity_1a582fc5f2b58d312404f599b8d00afa71" kindref="member">SIdx::AngularVelocity::Begin</ref>(),<sp/><ref refid="structkinematic__arbiter_1_1core_1_1StateIndex_1_1AngularAcceleration_1aba70ff56c29cff8b0cd60ddd365d093f" kindref="member">SIdx::AngularAcceleration::Begin</ref>())<sp/>=</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>time_step<sp/>*<sp/>Matrix3d::Identity();</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Acceleration<sp/>blocks<sp/>are<sp/>modelled<sp/>as<sp/>zero<sp/>(no<sp/>change)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Velocity<sp/>blocks<sp/>-<sp/>identity<sp/>for<sp/>velocity<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>jacobian.block&lt;3,3&gt;(<ref refid="structkinematic__arbiter_1_1core_1_1StateIndex_1_1LinearVelocity_1a90f46140a68776dac322db5def8ef932" kindref="member">SIdx::LinearVelocity::Begin</ref>(),<sp/><ref refid="structkinematic__arbiter_1_1core_1_1StateIndex_1_1LinearVelocity_1a90f46140a68776dac322db5def8ef932" kindref="member">SIdx::LinearVelocity::Begin</ref>())<sp/>=</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Matrix3d::Identity();</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Linear<sp/>velocity<sp/>wrt<sp/>linear<sp/>acceleration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/>jacobian.block&lt;3,3&gt;(<ref refid="structkinematic__arbiter_1_1core_1_1StateIndex_1_1LinearVelocity_1a90f46140a68776dac322db5def8ef932" kindref="member">SIdx::LinearVelocity::Begin</ref>(),<sp/><ref refid="structkinematic__arbiter_1_1core_1_1StateIndex_1_1LinearAcceleration_1abcde4fc83b04286fb93abd48826b54fe" kindref="member">SIdx::LinearAcceleration::Begin</ref>())<sp/>=</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>time_step<sp/>*<sp/>Matrix3d::Identity();</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Angular<sp/>velocity<sp/>blocks<sp/>-<sp/>identity<sp/>for<sp/>angular<sp/>velocity<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>jacobian.block&lt;3,3&gt;(<ref refid="structkinematic__arbiter_1_1core_1_1StateIndex_1_1AngularVelocity_1a582fc5f2b58d312404f599b8d00afa71" kindref="member">SIdx::AngularVelocity::Begin</ref>(),<sp/><ref refid="structkinematic__arbiter_1_1core_1_1StateIndex_1_1AngularVelocity_1a582fc5f2b58d312404f599b8d00afa71" kindref="member">SIdx::AngularVelocity::Begin</ref>())<sp/>=</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Matrix3d::Identity();</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Angular<sp/>velocity<sp/>wrt<sp/>angular<sp/>acceleration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>jacobian.block&lt;3,3&gt;(<ref refid="structkinematic__arbiter_1_1core_1_1StateIndex_1_1AngularVelocity_1a582fc5f2b58d312404f599b8d00afa71" kindref="member">SIdx::AngularVelocity::Begin</ref>(),<sp/><ref refid="structkinematic__arbiter_1_1core_1_1StateIndex_1_1AngularAcceleration_1aba70ff56c29cff8b0cd60ddd365d093f" kindref="member">SIdx::AngularAcceleration::Begin</ref>())<sp/>=</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>time_step<sp/>*<sp/>Matrix3d::Identity();</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>jacobian.block&lt;3,3&gt;(<ref refid="structkinematic__arbiter_1_1core_1_1StateIndex_1_1AngularAcceleration_1aba70ff56c29cff8b0cd60ddd365d093f" kindref="member">SIdx::AngularAcceleration::Begin</ref>(),<sp/><ref refid="structkinematic__arbiter_1_1core_1_1StateIndex_1_1AngularAcceleration_1aba70ff56c29cff8b0cd60ddd365d093f" kindref="member">SIdx::AngularAcceleration::Begin</ref>())<sp/>=</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::exp(-<ref refid="namespacekinematic__arbiter_1_1models_1_1anonymous__namespace_02rigid__body__state__model_8hpp_03_1aa82dde35738c9d742fc6db2f0a57c44a" kindref="member">kLambda</ref><sp/>*<sp/>time_step)<sp/>*<sp/>Matrix3d::Identity();</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>jacobian.block&lt;3,3&gt;(<ref refid="structkinematic__arbiter_1_1core_1_1StateIndex_1_1LinearAcceleration_1abcde4fc83b04286fb93abd48826b54fe" kindref="member">SIdx::LinearAcceleration::Begin</ref>(),<sp/><ref refid="structkinematic__arbiter_1_1core_1_1StateIndex_1_1LinearAcceleration_1abcde4fc83b04286fb93abd48826b54fe" kindref="member">SIdx::LinearAcceleration::Begin</ref>())<sp/>=</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::exp(-<ref refid="namespacekinematic__arbiter_1_1models_1_1anonymous__namespace_02rigid__body__state__model_8hpp_03_1aa82dde35738c9d742fc6db2f0a57c44a" kindref="member">kLambda</ref><sp/>*<sp/>time_step)<sp/>*<sp/>Matrix3d::Identity();</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>jacobian;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="302"><highlight class="normal">};</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>models</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>kinematic_arbiter</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/spencer/ros2workspace/src/kinematic_arbiter/include/kinematic_arbiter/models/rigid_body_state_model.hpp"/>
  </compounddef>
</doxygen>
