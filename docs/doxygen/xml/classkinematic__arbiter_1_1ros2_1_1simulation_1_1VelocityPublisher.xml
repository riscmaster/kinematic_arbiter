<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classkinematic__arbiter_1_1ros2_1_1simulation_1_1VelocityPublisher" kind="class" language="C++" prot="public">
    <compoundname>kinematic_arbiter::ros2::simulation::VelocityPublisher</compoundname>
    <basecompoundref refid="classkinematic__arbiter_1_1ros2_1_1simulation_1_1SensorPublisher" prot="public" virt="non-virtual">kinematic_arbiter::ros2::simulation::SensorPublisher&lt; geometry_msgs::msg::TwistStamped &gt;</basecompoundref>
    <includes refid="sensor__publisher_8hpp" local="no">sensor_publisher.hpp</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classkinematic__arbiter_1_1ros2_1_1simulation_1_1VelocityPublisher_1a26dff53021d5bbbb875c9f8c681c289e" prot="public" static="no">
        <type><ref refid="classkinematic__arbiter_1_1ros2_1_1simulation_1_1SensorPublisher" kindref="compound">SensorPublisher</ref>&lt; geometry_msgs::msg::TwistStamped &gt;</type>
        <definition>using kinematic_arbiter::ros2::simulation::VelocityPublisher::Base =  SensorPublisher&lt;geometry_msgs::msg::TwistStamped&gt;</definition>
        <argsstring></argsstring>
        <name>Base</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/spencer/ros2workspace/src/kinematic_arbiter/include/kinematic_arbiter/ros2/simulation/sensor_publisher.hpp" line="243" column="3" bodyfile="/home/spencer/ros2workspace/src/kinematic_arbiter/include/kinematic_arbiter/ros2/simulation/sensor_publisher.hpp" bodystart="243" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classkinematic__arbiter_1_1ros2_1_1simulation_1_1VelocityPublisher_1a181b0961d39b65b0d3fe135d6d705a8f" prot="public" static="no">
        <type><ref refid="structkinematic__arbiter_1_1sensors_1_1BodyVelocitySensorModel_1_1MeasurementIndex" kindref="compound">kinematic_arbiter::sensors::BodyVelocitySensorModel::MeasurementIndex</ref></type>
        <definition>using kinematic_arbiter::ros2::simulation::VelocityPublisher::MIdx =  kinematic_arbiter::sensors::BodyVelocitySensorModel::MeasurementIndex</definition>
        <argsstring></argsstring>
        <name>MIdx</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/spencer/ros2workspace/src/kinematic_arbiter/include/kinematic_arbiter/ros2/simulation/sensor_publisher.hpp" line="244" column="3" bodyfile="/home/spencer/ros2workspace/src/kinematic_arbiter/include/kinematic_arbiter/ros2/simulation/sensor_publisher.hpp" bodystart="244" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classkinematic__arbiter_1_1ros2_1_1simulation_1_1VelocityPublisher_1a3b6fee1f6296761f512253d3702249a0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>kinematic_arbiter::ros2::simulation::VelocityPublisher::VelocityPublisher</definition>
        <argsstring>(rclcpp::Node *node, const std::string &amp;name, double noise_sigma)</argsstring>
        <name>VelocityPublisher</name>
        <param>
          <type>rclcpp::Node *</type>
          <declname>node</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>double</type>
          <declname>noise_sigma</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/spencer/ros2workspace/src/kinematic_arbiter/include/kinematic_arbiter/ros2/simulation/sensor_publisher.hpp" line="246" column="3" bodyfile="/home/spencer/ros2workspace/src/kinematic_arbiter/include/kinematic_arbiter/ros2/simulation/sensor_publisher.hpp" bodystart="246" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="classkinematic__arbiter_1_1ros2_1_1simulation_1_1VelocityPublisher_1a1946e924a37b1898f917d2f23c1e5cbe" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>geometry_msgs::msg::TwistStamped</type>
        <definition>geometry_msgs::msg::TwistStamped kinematic_arbiter::ros2::simulation::VelocityPublisher::eigenToRos</definition>
        <argsstring>(const Eigen::VectorXd &amp;measurement, const std::string &amp;frame_id, const rclcpp::Time &amp;timestamp) override</argsstring>
        <name>eigenToRos</name>
        <reimplements refid="classkinematic__arbiter_1_1ros2_1_1simulation_1_1SensorPublisher_1ab7118cce5dfde001ef17b9372a8686b6">eigenToRos</reimplements>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>measurement</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>frame_id</declname>
        </param>
        <param>
          <type>const rclcpp::Time &amp;</type>
          <declname>timestamp</declname>
        </param>
        <briefdescription>
<para>Convert an Eigen vector to a ROS message. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>measurement</parametername>
</parameternamelist>
<parameterdescription>
<para>The Eigen vector to convert </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>frame_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The frame ID for the message </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timestamp</parametername>
</parameternamelist>
<parameterdescription>
<para>ROS timestamp for the message </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The ROS message </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/spencer/ros2workspace/src/kinematic_arbiter/include/kinematic_arbiter/ros2/simulation/sensor_publisher.hpp" line="252" column="36" bodyfile="/home/spencer/ros2workspace/src/kinematic_arbiter/include/kinematic_arbiter/ros2/simulation/sensor_publisher.hpp" bodystart="252" bodyend="272"/>
        <references refid="structkinematic__arbiter_1_1sensors_1_1BodyVelocitySensorModel_1_1MeasurementIndex_1a42ac10438b3c41d1106118ae02500af6" compoundref="body__velocity__sensor__model_8hpp" startline="33">kinematic_arbiter::sensors::BodyVelocitySensorModel::MeasurementIndex::VX</references>
        <references refid="structkinematic__arbiter_1_1sensors_1_1BodyVelocitySensorModel_1_1MeasurementIndex_1aec4aff33d6b26d73d6514e6104dc63c0" compoundref="body__velocity__sensor__model_8hpp" startline="34">kinematic_arbiter::sensors::BodyVelocitySensorModel::MeasurementIndex::VY</references>
        <references refid="structkinematic__arbiter_1_1sensors_1_1BodyVelocitySensorModel_1_1MeasurementIndex_1af0062094fe16158a380df98da0c592da" compoundref="body__velocity__sensor__model_8hpp" startline="35">kinematic_arbiter::sensors::BodyVelocitySensorModel::MeasurementIndex::VZ</references>
        <references refid="structkinematic__arbiter_1_1sensors_1_1BodyVelocitySensorModel_1_1MeasurementIndex_1a74c170fd579c4fbcee4bd7aade86a91a" compoundref="body__velocity__sensor__model_8hpp" startline="38">kinematic_arbiter::sensors::BodyVelocitySensorModel::MeasurementIndex::WX</references>
        <references refid="structkinematic__arbiter_1_1sensors_1_1BodyVelocitySensorModel_1_1MeasurementIndex_1a7b2746f3c58e554e3e1e2f5d51a65792" compoundref="body__velocity__sensor__model_8hpp" startline="39">kinematic_arbiter::sensors::BodyVelocitySensorModel::MeasurementIndex::WY</references>
        <references refid="structkinematic__arbiter_1_1sensors_1_1BodyVelocitySensorModel_1_1MeasurementIndex_1a0e54af58a52b66b40b61b37357109553" compoundref="body__velocity__sensor__model_8hpp" startline="40">kinematic_arbiter::sensors::BodyVelocitySensorModel::MeasurementIndex::WZ</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Velocity sensor publisher implementation. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>kinematic_arbiter::ros2::simulation::VelocityPublisher</label>
        <link refid="classkinematic__arbiter_1_1ros2_1_1simulation_1_1VelocityPublisher"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>kinematic_arbiter::ros2::simulation::SensorPublisher&lt; geometry_msgs::msg::TwistStamped &gt;</label>
        <link refid="classkinematic__arbiter_1_1ros2_1_1simulation_1_1SensorPublisher"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>kinematic_arbiter::ros2::simulation::VelocityPublisher</label>
        <link refid="classkinematic__arbiter_1_1ros2_1_1simulation_1_1VelocityPublisher"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>kinematic_arbiter::ros2::simulation::SensorPublisher&lt; geometry_msgs::msg::TwistStamped &gt;</label>
        <link refid="classkinematic__arbiter_1_1ros2_1_1simulation_1_1SensorPublisher"/>
      </node>
    </collaborationgraph>
    <location file="/home/spencer/ros2workspace/src/kinematic_arbiter/include/kinematic_arbiter/ros2/simulation/sensor_publisher.hpp" line="241" column="1" bodyfile="/home/spencer/ros2workspace/src/kinematic_arbiter/include/kinematic_arbiter/ros2/simulation/sensor_publisher.hpp" bodystart="241" bodyend="273"/>
    <listofallmembers>
      <member refid="classkinematic__arbiter_1_1ros2_1_1simulation_1_1VelocityPublisher_1a26dff53021d5bbbb875c9f8c681c289e" prot="public" virt="non-virtual"><scope>kinematic_arbiter::ros2::simulation::VelocityPublisher</scope><name>Base</name></member>
      <member refid="classkinematic__arbiter_1_1ros2_1_1simulation_1_1VelocityPublisher_1a1946e924a37b1898f917d2f23c1e5cbe" prot="public" virt="virtual"><scope>kinematic_arbiter::ros2::simulation::VelocityPublisher</scope><name>eigenToRos</name></member>
      <member refid="classkinematic__arbiter_1_1ros2_1_1simulation_1_1SensorPublisher_1ac89c1b6b2e1b41eda1851d37209ceaa4" prot="protected" virt="non-virtual"><scope>kinematic_arbiter::ros2::simulation::VelocityPublisher</scope><name>lower_bound_pub_</name></member>
      <member refid="classkinematic__arbiter_1_1ros2_1_1simulation_1_1SensorPublisher_1a22687a2da35486cbe7390d2a3185434e" prot="public" virt="non-virtual"><scope>kinematic_arbiter::ros2::simulation::VelocityPublisher</scope><name>MeasurementModelInterface</name></member>
      <member refid="classkinematic__arbiter_1_1ros2_1_1simulation_1_1VelocityPublisher_1a181b0961d39b65b0d3fe135d6d705a8f" prot="public" virt="non-virtual"><scope>kinematic_arbiter::ros2::simulation::VelocityPublisher</scope><name>MIdx</name></member>
      <member refid="classkinematic__arbiter_1_1ros2_1_1simulation_1_1SensorPublisher_1adaaeae7c03fc8e9cbd89254bb9885049" prot="protected" virt="non-virtual"><scope>kinematic_arbiter::ros2::simulation::VelocityPublisher</scope><name>name_</name></member>
      <member refid="classkinematic__arbiter_1_1ros2_1_1simulation_1_1SensorPublisher_1a4ad5e309bbba9fa26ea9ebad0d83291f" prot="protected" virt="non-virtual"><scope>kinematic_arbiter::ros2::simulation::VelocityPublisher</scope><name>node_</name></member>
      <member refid="classkinematic__arbiter_1_1ros2_1_1simulation_1_1SensorPublisher_1aa2dfcea2e499e82293e24b1ae7dad6ad" prot="protected" virt="non-virtual"><scope>kinematic_arbiter::ros2::simulation::VelocityPublisher</scope><name>noise_dist_</name></member>
      <member refid="classkinematic__arbiter_1_1ros2_1_1simulation_1_1SensorPublisher_1ae6337e8c038af34a14801f7ea9a70b06" prot="protected" virt="non-virtual"><scope>kinematic_arbiter::ros2::simulation::VelocityPublisher</scope><name>noise_sigma_</name></member>
      <member refid="classkinematic__arbiter_1_1ros2_1_1simulation_1_1SensorPublisher_1a8f52af5543a29c7e61d315ef4fa57af9" prot="public" virt="non-virtual"><scope>kinematic_arbiter::ros2::simulation::VelocityPublisher</scope><name>publish</name></member>
      <member refid="classkinematic__arbiter_1_1ros2_1_1simulation_1_1SensorPublisher_1ab33550bd1d561f2dfc95342b575dbcc4" prot="protected" virt="non-virtual"><scope>kinematic_arbiter::ros2::simulation::VelocityPublisher</scope><name>raw_pub_</name></member>
      <member refid="classkinematic__arbiter_1_1ros2_1_1simulation_1_1SensorPublisher_1a88146820d1da0925417e98f8cb37d20e" prot="protected" virt="non-virtual"><scope>kinematic_arbiter::ros2::simulation::VelocityPublisher</scope><name>sensor_type_</name></member>
      <member refid="classkinematic__arbiter_1_1ros2_1_1simulation_1_1SensorPublisher_1afa109a98e1dd6e2aae3bb9a288460194" prot="public" virt="non-virtual"><scope>kinematic_arbiter::ros2::simulation::VelocityPublisher</scope><name>SensorPublisher</name></member>
      <member refid="classkinematic__arbiter_1_1ros2_1_1simulation_1_1SensorPublisher_1a703880f8676edeefeb964cb21f0fecf8" prot="protected" virt="non-virtual"><scope>kinematic_arbiter::ros2::simulation::VelocityPublisher</scope><name>truth_pub_</name></member>
      <member refid="classkinematic__arbiter_1_1ros2_1_1simulation_1_1SensorPublisher_1af1813d86918ff7414afb8b6b8d2d7a89" prot="protected" virt="non-virtual"><scope>kinematic_arbiter::ros2::simulation::VelocityPublisher</scope><name>upper_bound_pub_</name></member>
      <member refid="classkinematic__arbiter_1_1ros2_1_1simulation_1_1VelocityPublisher_1a3b6fee1f6296761f512253d3702249a0" prot="public" virt="non-virtual"><scope>kinematic_arbiter::ros2::simulation::VelocityPublisher</scope><name>VelocityPublisher</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
