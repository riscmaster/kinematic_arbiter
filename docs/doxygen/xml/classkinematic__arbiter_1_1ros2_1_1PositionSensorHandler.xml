<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classkinematic__arbiter_1_1ros2_1_1PositionSensorHandler" kind="class" language="C++" prot="public">
    <compoundname>kinematic_arbiter::ros2::PositionSensorHandler</compoundname>
    <basecompoundref refid="classkinematic__arbiter_1_1ros2_1_1SensorHandler" prot="public" virt="non-virtual">kinematic_arbiter::ros2::SensorHandler&lt; geometry_msgs::msg::PointStamped &gt;</basecompoundref>
    <includes refid="position__sensor__handler_8hpp" local="no">position_sensor_handler.hpp</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classkinematic__arbiter_1_1ros2_1_1PositionSensorHandler_1ada17016c3507064ba78cc300ad7a9da2" prot="public" static="no">
        <type><ref refid="classkinematic__arbiter_1_1ros2_1_1SensorHandler" kindref="compound">SensorHandler</ref>&lt; geometry_msgs::msg::PointStamped &gt;</type>
        <definition>using kinematic_arbiter::ros2::PositionSensorHandler::Base =  SensorHandler&lt;geometry_msgs::msg::PointStamped&gt;</definition>
        <argsstring></argsstring>
        <name>Base</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/spencer/ros2workspace/src/kinematic_arbiter/include/kinematic_arbiter/ros2/position_sensor_handler.hpp" line="15" column="3" bodyfile="/home/spencer/ros2workspace/src/kinematic_arbiter/include/kinematic_arbiter/ros2/position_sensor_handler.hpp" bodystart="15" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classkinematic__arbiter_1_1ros2_1_1PositionSensorHandler_1a076a0f3c3f30e2bdaae2dc5eb3a60bb2" prot="public" static="no">
        <type><ref refid="classkinematic__arbiter_1_1sensors_1_1PositionSensorModel" kindref="compound">kinematic_arbiter::sensors::PositionSensorModel</ref></type>
        <definition>using kinematic_arbiter::ros2::PositionSensorHandler::ModelType =  kinematic_arbiter::sensors::PositionSensorModel</definition>
        <argsstring></argsstring>
        <name>ModelType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/spencer/ros2workspace/src/kinematic_arbiter/include/kinematic_arbiter/ros2/position_sensor_handler.hpp" line="16" column="3" bodyfile="/home/spencer/ros2workspace/src/kinematic_arbiter/include/kinematic_arbiter/ros2/position_sensor_handler.hpp" bodystart="16" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classkinematic__arbiter_1_1ros2_1_1PositionSensorHandler_1a07643ee49de55db3e491b912d93b0e05" prot="public" static="no">
        <type><ref refid="structkinematic__arbiter_1_1sensors_1_1PositionSensorModel_1_1MeasurementIndex" kindref="compound">ModelType::MeasurementIndex</ref></type>
        <definition>using kinematic_arbiter::ros2::PositionSensorHandler::MeasurementIndex =  ModelType::MeasurementIndex</definition>
        <argsstring></argsstring>
        <name>MeasurementIndex</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/spencer/ros2workspace/src/kinematic_arbiter/include/kinematic_arbiter/ros2/position_sensor_handler.hpp" line="17" column="3" bodyfile="/home/spencer/ros2workspace/src/kinematic_arbiter/include/kinematic_arbiter/ros2/position_sensor_handler.hpp" bodystart="17" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classkinematic__arbiter_1_1ros2_1_1PositionSensorHandler_1af04153e553619576c10df1dc0d2acc2a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>kinematic_arbiter::ros2::PositionSensorHandler::PositionSensorHandler</definition>
        <argsstring>(rclcpp::Node *node, std::shared_ptr&lt; Filter &gt; filter, std::shared_ptr&lt; tf2_ros::Buffer &gt; tf_buffer, std::shared_ptr&lt; utils::TimeManager &gt; time_manager, const std::string &amp;sensor_name, const std::string &amp;topic, const std::string &amp;sensor_frame_id, const std::string &amp;reference_frame_id, const std::string &amp;body_frame_id)</argsstring>
        <name>PositionSensorHandler</name>
        <param>
          <type>rclcpp::Node *</type>
          <declname>node</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classkinematic__arbiter_1_1ros2_1_1SensorHandler_1a11826ffbf43101b3c9957f59c56c69a3" kindref="member">Filter</ref> &gt;</type>
          <declname>filter</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; tf2_ros::Buffer &gt;</type>
          <declname>tf_buffer</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classkinematic__arbiter_1_1ros2_1_1utils_1_1TimeManager" kindref="compound">utils::TimeManager</ref> &gt;</type>
          <declname>time_manager</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>sensor_name</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>topic</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>sensor_frame_id</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>reference_frame_id</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>body_frame_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/spencer/ros2workspace/src/kinematic_arbiter/include/kinematic_arbiter/ros2/position_sensor_handler.hpp" line="19" column="3" bodyfile="/home/spencer/ros2workspace/src/kinematic_arbiter/include/kinematic_arbiter/ros2/position_sensor_handler.hpp" bodystart="19" bodyend="32"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classkinematic__arbiter_1_1ros2_1_1PositionSensorHandler_1ac19c83562c9516c43c5933c77521f981" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool kinematic_arbiter::ros2::PositionSensorHandler::msgToVector</definition>
        <argsstring>(const geometry_msgs::msg::PointStamped &amp;msg, DynamicVector &amp;vector) override</argsstring>
        <name>msgToVector</name>
        <reimplements refid="classkinematic__arbiter_1_1ros2_1_1SensorHandler_1a240e054f2e536ac7ee6dae29aa066f97">msgToVector</reimplements>
        <param>
          <type>const geometry_msgs::msg::PointStamped &amp;</type>
          <declname>msg</declname>
        </param>
        <param>
          <type><ref refid="classkinematic__arbiter_1_1ros2_1_1SensorHandler_1a4845c39c1ed40883a357027612f3d792" kindref="member">DynamicVector</ref> &amp;</type>
          <declname>vector</declname>
        </param>
        <briefdescription>
<para>Convert message to measurement vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/spencer/ros2workspace/src/kinematic_arbiter/include/kinematic_arbiter/ros2/position_sensor_handler.hpp" line="36" column="8" bodyfile="/home/spencer/ros2workspace/src/kinematic_arbiter/include/kinematic_arbiter/ros2/position_sensor_handler.hpp" bodystart="36" bodyend="42"/>
        <references refid="classkinematic__arbiter_1_1sensors_1_1PositionSensorModel_1a173d17b61a41ece1380c66ca2b54e3b3" compoundref="position__sensor__model_8hpp" startline="18">kinematic_arbiter::sensors::PositionSensorModel::kMeasurementDimension</references>
        <references refid="structkinematic__arbiter_1_1sensors_1_1PositionSensorModel_1_1MeasurementIndex_1a4b495807b74b2b8254a7ac8a5fd144b9" compoundref="position__sensor__model_8hpp" startline="29">kinematic_arbiter::sensors::PositionSensorModel::MeasurementIndex::X</references>
        <references refid="structkinematic__arbiter_1_1sensors_1_1PositionSensorModel_1_1MeasurementIndex_1a700e743c89944155bb18caa693375a1e" compoundref="position__sensor__model_8hpp" startline="30">kinematic_arbiter::sensors::PositionSensorModel::MeasurementIndex::Y</references>
        <references refid="structkinematic__arbiter_1_1sensors_1_1PositionSensorModel_1_1MeasurementIndex_1a2a0b2b0e4e4a5c318473dd5fc38c168f" compoundref="position__sensor__model_8hpp" startline="31">kinematic_arbiter::sensors::PositionSensorModel::MeasurementIndex::Z</references>
      </memberdef>
      <memberdef kind="function" id="classkinematic__arbiter_1_1ros2_1_1PositionSensorHandler_1a4fcc583c4cca630a978ff5aa0c953c73" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>geometry_msgs::msg::PointStamped</type>
        <definition>geometry_msgs::msg::PointStamped kinematic_arbiter::ros2::PositionSensorHandler::vectorToMsg</definition>
        <argsstring>(const DynamicVector &amp;vector, const std_msgs::msg::Header &amp;header) override</argsstring>
        <name>vectorToMsg</name>
        <reimplements refid="classkinematic__arbiter_1_1ros2_1_1SensorHandler_1af73f0d302ea4941d4ec056dd47cf0992">vectorToMsg</reimplements>
        <param>
          <type>const <ref refid="classkinematic__arbiter_1_1ros2_1_1SensorHandler_1a4845c39c1ed40883a357027612f3d792" kindref="member">DynamicVector</ref> &amp;</type>
          <declname>vector</declname>
        </param>
        <param>
          <type>const std_msgs::msg::Header &amp;</type>
          <declname>header</declname>
        </param>
        <briefdescription>
<para>Convert measurement vector to message. </para>
        </briefdescription>
        <detaileddescription>
<para>The covariance is not needed as a parameter because we can get it directly from the filter </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/spencer/ros2workspace/src/kinematic_arbiter/include/kinematic_arbiter/ros2/position_sensor_handler.hpp" line="44" column="36" bodyfile="/home/spencer/ros2workspace/src/kinematic_arbiter/include/kinematic_arbiter/ros2/position_sensor_handler.hpp" bodystart="44" bodyend="56"/>
        <references refid="structkinematic__arbiter_1_1sensors_1_1PositionSensorModel_1_1MeasurementIndex_1a4b495807b74b2b8254a7ac8a5fd144b9" compoundref="position__sensor__model_8hpp" startline="29">kinematic_arbiter::sensors::PositionSensorModel::MeasurementIndex::X</references>
        <references refid="structkinematic__arbiter_1_1sensors_1_1PositionSensorModel_1_1MeasurementIndex_1a700e743c89944155bb18caa693375a1e" compoundref="position__sensor__model_8hpp" startline="30">kinematic_arbiter::sensors::PositionSensorModel::MeasurementIndex::Y</references>
        <references refid="structkinematic__arbiter_1_1sensors_1_1PositionSensorModel_1_1MeasurementIndex_1a2a0b2b0e4e4a5c318473dd5fc38c168f" compoundref="position__sensor__model_8hpp" startline="31">kinematic_arbiter::sensors::PositionSensorModel::MeasurementIndex::Z</references>
      </memberdef>
      <memberdef kind="function" id="classkinematic__arbiter_1_1ros2_1_1PositionSensorHandler_1aef1173b3a64f66078ef506675166483c" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>geometry_msgs::msg::PointStamped</type>
        <definition>geometry_msgs::msg::PointStamped kinematic_arbiter::ros2::PositionSensorHandler::applyBound</definition>
        <argsstring>(const geometry_msgs::msg::PointStamped &amp;base_msg, const DynamicCovariance &amp;covariance, bool positive) override</argsstring>
        <name>applyBound</name>
        <reimplements refid="classkinematic__arbiter_1_1ros2_1_1SensorHandler_1a82b574c4cbd3cfbf23ec2123a4e555db">applyBound</reimplements>
        <param>
          <type>const geometry_msgs::msg::PointStamped &amp;</type>
          <declname>base_msg</declname>
        </param>
        <param>
          <type>const <ref refid="classkinematic__arbiter_1_1ros2_1_1SensorHandler_1a0e0ff0526d02fcae926d3afba1b8aae8" kindref="member">DynamicCovariance</ref> &amp;</type>
          <declname>covariance</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>positive</declname>
        </param>
        <briefdescription>
<para>Apply a sigma bound offset to a message. </para>
        </briefdescription>
        <detaileddescription>
<para>Creates a new message with a sigma-bound offset in the positive or negative direction</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>base_msg</parametername>
</parameternamelist>
<parameterdescription>
<para>The base message to modify </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>covariance</parametername>
</parameternamelist>
<parameterdescription>
<para>The measurement covariance </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>positive</parametername>
</parameternamelist>
<parameterdescription>
<para>True for upper bound, false for lower bound </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The bounded message </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/spencer/ros2workspace/src/kinematic_arbiter/include/kinematic_arbiter/ros2/position_sensor_handler.hpp" line="58" column="36" bodyfile="/home/spencer/ros2workspace/src/kinematic_arbiter/include/kinematic_arbiter/ros2/position_sensor_handler.hpp" bodystart="58" bodyend="76"/>
        <references refid="classkinematic__arbiter_1_1ros2_1_1SensorHandler_1a0e2786774b62a21485357a00eb1b13d1" compoundref="sensor__handler_8hpp" startline="38">kinematic_arbiter::ros2::SensorHandler&lt; geometry_msgs::msg::PointStamped &gt;::SIGMA_BOUND_FACTOR</references>
        <references refid="structkinematic__arbiter_1_1sensors_1_1PositionSensorModel_1_1MeasurementIndex_1a4b495807b74b2b8254a7ac8a5fd144b9" compoundref="position__sensor__model_8hpp" startline="29">kinematic_arbiter::sensors::PositionSensorModel::MeasurementIndex::X</references>
        <references refid="structkinematic__arbiter_1_1sensors_1_1PositionSensorModel_1_1MeasurementIndex_1a700e743c89944155bb18caa693375a1e" compoundref="position__sensor__model_8hpp" startline="30">kinematic_arbiter::sensors::PositionSensorModel::MeasurementIndex::Y</references>
        <references refid="structkinematic__arbiter_1_1sensors_1_1PositionSensorModel_1_1MeasurementIndex_1a2a0b2b0e4e4a5c318473dd5fc38c168f" compoundref="position__sensor__model_8hpp" startline="31">kinematic_arbiter::sensors::PositionSensorModel::MeasurementIndex::Z</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Position sensor handler. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>kinematic_arbiter::ros2::PositionSensorHandler</label>
        <link refid="classkinematic__arbiter_1_1ros2_1_1PositionSensorHandler"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>kinematic_arbiter::ros2::SensorHandler&lt; geometry_msgs::msg::PointStamped &gt;</label>
        <link refid="classkinematic__arbiter_1_1ros2_1_1SensorHandler"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>kinematic_arbiter::ros2::PositionSensorHandler</label>
        <link refid="classkinematic__arbiter_1_1ros2_1_1PositionSensorHandler"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>kinematic_arbiter::ros2::SensorHandler&lt; geometry_msgs::msg::PointStamped &gt;</label>
        <link refid="classkinematic__arbiter_1_1ros2_1_1SensorHandler"/>
      </node>
    </collaborationgraph>
    <location file="/home/spencer/ros2workspace/src/kinematic_arbiter/include/kinematic_arbiter/ros2/position_sensor_handler.hpp" line="13" column="1" bodyfile="/home/spencer/ros2workspace/src/kinematic_arbiter/include/kinematic_arbiter/ros2/position_sensor_handler.hpp" bodystart="13" bodyend="77"/>
    <listofallmembers>
      <member refid="classkinematic__arbiter_1_1ros2_1_1PositionSensorHandler_1aef1173b3a64f66078ef506675166483c" prot="protected" virt="virtual"><scope>kinematic_arbiter::ros2::PositionSensorHandler</scope><name>applyBound</name></member>
      <member refid="classkinematic__arbiter_1_1ros2_1_1PositionSensorHandler_1ada17016c3507064ba78cc300ad7a9da2" prot="public" virt="non-virtual"><scope>kinematic_arbiter::ros2::PositionSensorHandler</scope><name>Base</name></member>
      <member refid="classkinematic__arbiter_1_1ros2_1_1SensorHandler_1afd6a42e473d68fb1f7fe5bffbf16ed6a" prot="private" virt="non-virtual"><scope>kinematic_arbiter::ros2::PositionSensorHandler</scope><name>body_frame_id_</name></member>
      <member refid="classkinematic__arbiter_1_1ros2_1_1SensorHandler_1a0e0ff0526d02fcae926d3afba1b8aae8" prot="public" virt="non-virtual"><scope>kinematic_arbiter::ros2::PositionSensorHandler</scope><name>DynamicCovariance</name></member>
      <member refid="classkinematic__arbiter_1_1ros2_1_1SensorHandler_1a4845c39c1ed40883a357027612f3d792" prot="public" virt="non-virtual"><scope>kinematic_arbiter::ros2::PositionSensorHandler</scope><name>DynamicVector</name></member>
      <member refid="classkinematic__arbiter_1_1ros2_1_1SensorHandler_1ae960ef8e284337936f5acb28d1b6a70d" prot="private" virt="non-virtual"><scope>kinematic_arbiter::ros2::PositionSensorHandler</scope><name>expected_pub_</name></member>
      <member refid="classkinematic__arbiter_1_1ros2_1_1SensorHandler_1a11826ffbf43101b3c9957f59c56c69a3" prot="public" virt="non-virtual"><scope>kinematic_arbiter::ros2::PositionSensorHandler</scope><name>Filter</name></member>
      <member refid="classkinematic__arbiter_1_1ros2_1_1SensorHandler_1a72cc31a6f49d0f94eefefd751ed3580e" prot="private" virt="non-virtual"><scope>kinematic_arbiter::ros2::PositionSensorHandler</scope><name>filter_</name></member>
      <member refid="classkinematic__arbiter_1_1ros2_1_1SensorHandler_1aa3d7ec017d40088221fd0aa9671a1ebb" prot="public" virt="non-virtual"><scope>kinematic_arbiter::ros2::PositionSensorHandler</scope><name>getSensorId</name></member>
      <member refid="classkinematic__arbiter_1_1ros2_1_1SensorHandler_1a6a2e391b01c906eb521549c6d9852e19" prot="private" virt="non-virtual"><scope>kinematic_arbiter::ros2::PositionSensorHandler</scope><name>has_valid_transform_</name></member>
      <member refid="classkinematic__arbiter_1_1ros2_1_1SensorHandler_1a573195b53a7344f2d9d7d86e37e20062" prot="private" virt="non-virtual"><scope>kinematic_arbiter::ros2::PositionSensorHandler</scope><name>lookupStaticTransform</name></member>
      <member refid="classkinematic__arbiter_1_1ros2_1_1SensorHandler_1af06d5739d95bcfa335c69b3d4d461d71" prot="private" virt="non-virtual"><scope>kinematic_arbiter::ros2::PositionSensorHandler</scope><name>lower_bound_pub_</name></member>
      <member refid="classkinematic__arbiter_1_1ros2_1_1PositionSensorHandler_1a07643ee49de55db3e491b912d93b0e05" prot="public" virt="non-virtual"><scope>kinematic_arbiter::ros2::PositionSensorHandler</scope><name>MeasurementIndex</name></member>
      <member refid="classkinematic__arbiter_1_1ros2_1_1SensorHandler_1a4a844e4c4d7a6c772f5e844d57b49372" prot="public" virt="non-virtual"><scope>kinematic_arbiter::ros2::PositionSensorHandler</scope><name>MeasurementModelInterface</name></member>
      <member refid="classkinematic__arbiter_1_1ros2_1_1SensorHandler_1a89a9cb9125c64a70da34fd546ab61ee5" prot="private" virt="non-virtual"><scope>kinematic_arbiter::ros2::PositionSensorHandler</scope><name>messageCallback</name></member>
      <member refid="classkinematic__arbiter_1_1ros2_1_1PositionSensorHandler_1a076a0f3c3f30e2bdaae2dc5eb3a60bb2" prot="public" virt="non-virtual"><scope>kinematic_arbiter::ros2::PositionSensorHandler</scope><name>ModelType</name></member>
      <member refid="classkinematic__arbiter_1_1ros2_1_1PositionSensorHandler_1ac19c83562c9516c43c5933c77521f981" prot="protected" virt="virtual"><scope>kinematic_arbiter::ros2::PositionSensorHandler</scope><name>msgToVector</name></member>
      <member refid="classkinematic__arbiter_1_1ros2_1_1SensorHandler_1ab052a1d834b3d5046ca2d69d14f1900d" prot="private" virt="non-virtual"><scope>kinematic_arbiter::ros2::PositionSensorHandler</scope><name>node_</name></member>
      <member refid="classkinematic__arbiter_1_1ros2_1_1PositionSensorHandler_1af04153e553619576c10df1dc0d2acc2a" prot="public" virt="non-virtual"><scope>kinematic_arbiter::ros2::PositionSensorHandler</scope><name>PositionSensorHandler</name></member>
      <member refid="classkinematic__arbiter_1_1ros2_1_1SensorHandler_1a0d89952874a48c55aef825ff7f13ae1a" prot="private" virt="non-virtual"><scope>kinematic_arbiter::ros2::PositionSensorHandler</scope><name>publishExpectedMeasurement</name></member>
      <member refid="classkinematic__arbiter_1_1ros2_1_1SensorHandler_1a4aa65cc833aa1dadcf7cab4f9ef08171" prot="private" virt="non-virtual"><scope>kinematic_arbiter::ros2::PositionSensorHandler</scope><name>reference_frame_id_</name></member>
      <member refid="classkinematic__arbiter_1_1ros2_1_1SensorHandler_1aed32088585389429d17b4ffb43539351" prot="private" virt="non-virtual"><scope>kinematic_arbiter::ros2::PositionSensorHandler</scope><name>sensor_frame_id_</name></member>
      <member refid="classkinematic__arbiter_1_1ros2_1_1SensorHandler_1a351832b4b98b22c2c7fb6af998aa154e" prot="private" virt="non-virtual"><scope>kinematic_arbiter::ros2::PositionSensorHandler</scope><name>sensor_id_</name></member>
      <member refid="classkinematic__arbiter_1_1ros2_1_1SensorHandler_1af724278d1d8708d14bdca6ef048528c5" prot="private" virt="non-virtual"><scope>kinematic_arbiter::ros2::PositionSensorHandler</scope><name>sensor_index_</name></member>
      <member refid="classkinematic__arbiter_1_1ros2_1_1SensorHandler_1a820176d283edb4a5cdc39872c934f880" prot="private" virt="non-virtual"><scope>kinematic_arbiter::ros2::PositionSensorHandler</scope><name>sensor_model_</name></member>
      <member refid="classkinematic__arbiter_1_1ros2_1_1SensorHandler_1a64944749bf7fc45b8556b94bb0736ebf" prot="private" virt="non-virtual"><scope>kinematic_arbiter::ros2::PositionSensorHandler</scope><name>sensor_name_</name></member>
      <member refid="classkinematic__arbiter_1_1ros2_1_1SensorHandler_1ade4884e545618ee0a04209c88062117e" prot="private" virt="non-virtual"><scope>kinematic_arbiter::ros2::PositionSensorHandler</scope><name>sensor_to_body_transform_</name></member>
      <member refid="classkinematic__arbiter_1_1ros2_1_1SensorHandler_1a2de4944e89e7379bcf2f8b2bcd80fd6a" prot="private" virt="non-virtual"><scope>kinematic_arbiter::ros2::PositionSensorHandler</scope><name>sensor_type_</name></member>
      <member refid="classkinematic__arbiter_1_1ros2_1_1SensorHandler_1aeb89991b470b121b0f3f81a658527b9d" prot="public" virt="non-virtual"><scope>kinematic_arbiter::ros2::PositionSensorHandler</scope><name>SensorHandler</name></member>
      <member refid="classkinematic__arbiter_1_1ros2_1_1SensorHandler_1a3c17f098d380353f141a11698eb74874" prot="public" virt="non-virtual"><scope>kinematic_arbiter::ros2::PositionSensorHandler</scope><name>SensorType</name></member>
      <member refid="classkinematic__arbiter_1_1ros2_1_1SensorHandler_1acd11564df43dc3fe40e5b29aee1ea189" prot="public" virt="non-virtual"><scope>kinematic_arbiter::ros2::PositionSensorHandler</scope><name>setValidationParams</name></member>
      <member refid="classkinematic__arbiter_1_1ros2_1_1SensorHandler_1a0e2786774b62a21485357a00eb1b13d1" prot="public" virt="non-virtual"><scope>kinematic_arbiter::ros2::PositionSensorHandler</scope><name>SIGMA_BOUND_FACTOR</name></member>
      <member refid="classkinematic__arbiter_1_1ros2_1_1SensorHandler_1a315e7261398e007ec210dad186521044" prot="private" virt="non-virtual"><scope>kinematic_arbiter::ros2::PositionSensorHandler</scope><name>subscription_</name></member>
      <member refid="classkinematic__arbiter_1_1ros2_1_1SensorHandler_1acfdc9b270cbe34e3db25525caf0305ca" prot="private" virt="non-virtual"><scope>kinematic_arbiter::ros2::PositionSensorHandler</scope><name>tf_buffer_</name></member>
      <member refid="classkinematic__arbiter_1_1ros2_1_1SensorHandler_1ad9ed747b382f38dfe1f7bb898505ee69" prot="private" virt="non-virtual"><scope>kinematic_arbiter::ros2::PositionSensorHandler</scope><name>time_manager_</name></member>
      <member refid="classkinematic__arbiter_1_1ros2_1_1SensorHandler_1aacde580262a5c673c3c46778bd5d87ce" prot="private" virt="non-virtual"><scope>kinematic_arbiter::ros2::PositionSensorHandler</scope><name>topic_</name></member>
      <member refid="classkinematic__arbiter_1_1ros2_1_1SensorHandler_1a1c92318e86de661517f118b529aaaf00" prot="private" virt="non-virtual"><scope>kinematic_arbiter::ros2::PositionSensorHandler</scope><name>upper_bound_pub_</name></member>
      <member refid="classkinematic__arbiter_1_1ros2_1_1PositionSensorHandler_1a4fcc583c4cca630a978ff5aa0c953c73" prot="protected" virt="virtual"><scope>kinematic_arbiter::ros2::PositionSensorHandler</scope><name>vectorToMsg</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
