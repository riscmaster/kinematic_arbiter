<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="mediated__kalman__filter_8hpp" kind="file" language="C++">
    <compoundname>mediated_kalman_filter.hpp</compoundname>
    <includes local="no">stdexcept</includes>
    <includes local="no">deque</includes>
    <includes local="no">map</includes>
    <includes local="no">string</includes>
    <includes local="no">tuple</includes>
    <includes local="no">optional</includes>
    <includes local="no">type_traits</includes>
    <includes local="no">Eigen/Dense</includes>
    <includes local="no">boost/math/distributions/chi_squared.hpp</includes>
    <includes refid="state__index_8hpp" local="yes">kinematic_arbiter/core/state_index.hpp</includes>
    <includes refid="state__model__interface_8hpp" local="yes">kinematic_arbiter/core/state_model_interface.hpp</includes>
    <includes refid="measurement__model__interface_8hpp" local="yes">kinematic_arbiter/core/measurement_model_interface.hpp</includes>
    <includes refid="mediation__types_8hpp" local="yes">kinematic_arbiter/core/mediation_types.hpp</includes>
    <includedby refid="filter__wrapper_8hpp" local="yes">/home/spencer/ros2workspace/src/kinematic_arbiter/include/kinematic_arbiter/ros2/filter_wrapper.hpp</includedby>
    <includedby refid="sensor__handler_8hpp" local="yes">/home/spencer/ros2workspace/src/kinematic_arbiter/include/kinematic_arbiter/ros2/sensor_handler.hpp</includedby>
    <incdepgraph>
      <node id="11">
        <label>kinematic_arbiter/core/state_index.hpp</label>
        <link refid="state__index_8hpp"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>limits</label>
      </node>
      <node id="20">
        <label>kinematic_arbiter/core/mediation_types.hpp</label>
        <link refid="mediation__types_8hpp"/>
      </node>
      <node id="18">
        <label>Eigen/Geometry</label>
      </node>
      <node id="16">
        <label>cmath</label>
      </node>
      <node id="2">
        <label>stdexcept</label>
      </node>
      <node id="10">
        <label>boost/math/distributions/chi_squared.hpp</label>
      </node>
      <node id="5">
        <label>string</label>
      </node>
      <node id="4">
        <label>map</label>
      </node>
      <node id="24">
        <label>random</label>
      </node>
      <node id="9">
        <label>Eigen/Dense</label>
      </node>
      <node id="17">
        <label>kinematic_arbiter/core/measurement_model_interface.hpp</label>
        <link refid="measurement__model__interface_8hpp"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>tuple</label>
      </node>
      <node id="7">
        <label>optional</label>
      </node>
      <node id="13">
        <label>vector</label>
      </node>
      <node id="25">
        <label>kinematic_arbiter/core/sensor_types.hpp</label>
        <link refid="sensor__types_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>kinematic_arbiter/core/statistical_utils.hpp</label>
        <link refid="statistical__utils_8hpp"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>array</label>
      </node>
      <node id="15">
        <label>kinematic_arbiter/core/state_model_interface.hpp</label>
        <link refid="state__model__interface_8hpp"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/home/spencer/ros2workspace/src/kinematic_arbiter/include/kinematic_arbiter/core/mediated_kalman_filter.hpp</label>
        <link refid="mediated__kalman__filter_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>iostream</label>
      </node>
      <node id="12">
        <label>cstddef</label>
      </node>
      <node id="3">
        <label>deque</label>
      </node>
      <node id="14">
        <label>unordered_map</label>
      </node>
      <node id="8">
        <label>type_traits</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="10">
        <label>/home/spencer/ros2workspace/src/kinematic_arbiter/include/kinematic_arbiter/ros2/position_sensor_handler.hpp</label>
        <link refid="position__sensor__handler_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>/home/spencer/ros2workspace/src/kinematic_arbiter/include/kinematic_arbiter/ros2/velocity_sensor_handler.hpp</label>
        <link refid="velocity__sensor__handler_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>/home/spencer/ros2workspace/src/kinematic_arbiter/src/ros2/filter_wrapper.cpp</label>
        <link refid="filter__wrapper_8cpp"/>
      </node>
      <node id="9">
        <label>/home/spencer/ros2workspace/src/kinematic_arbiter/include/kinematic_arbiter/ros2/pose_sensor_handler.hpp</label>
        <link refid="pose__sensor__handler_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>/home/spencer/ros2workspace/src/kinematic_arbiter/include/kinematic_arbiter/ros2/imu_sensor_handler.hpp</label>
        <link refid="imu__sensor__handler_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>/home/spencer/ros2workspace/src/kinematic_arbiter/src/ros2/main.cpp</label>
        <link refid="main_8cpp"/>
      </node>
      <node id="7">
        <label>/home/spencer/ros2workspace/src/kinematic_arbiter/include/kinematic_arbiter/ros2/sensor_handler.hpp</label>
        <link refid="sensor__handler_8hpp"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>/home/spencer/ros2workspace/src/kinematic_arbiter/src/ros2/kinematic_arbiter_node.cpp</label>
        <link refid="kinematic__arbiter__node_8cpp"/>
      </node>
      <node id="1">
        <label>/home/spencer/ros2workspace/src/kinematic_arbiter/include/kinematic_arbiter/core/mediated_kalman_filter.hpp</label>
        <link refid="mediated__kalman__filter_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>/home/spencer/ros2workspace/src/kinematic_arbiter/include/kinematic_arbiter/ros2/filter_wrapper.hpp</label>
        <link refid="filter__wrapper_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>/home/spencer/ros2workspace/src/kinematic_arbiter/include/kinematic_arbiter/ros2/kinematic_arbiter_node.hpp</label>
        <link refid="kinematic__arbiter__node_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter" prot="public">kinematic_arbiter::core::MediatedKalmanFilter</innerclass>
    <innernamespace refid="namespacekinematic__arbiter">kinematic_arbiter</innernamespace>
    <innernamespace refid="namespacekinematic__arbiter_1_1core">kinematic_arbiter::core</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdexcept&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;deque&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;tuple&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;optional&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;type_traits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;Eigen/Dense&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/math/distributions/chi_squared.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="state__index_8hpp" kindref="compound">kinematic_arbiter/core/state_index.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="state__model__interface_8hpp" kindref="compound">kinematic_arbiter/core/state_model_interface.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="measurement__model__interface_8hpp" kindref="compound">kinematic_arbiter/core/measurement_model_interface.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="mediation__types_8hpp" kindref="compound">kinematic_arbiter/core/mediation_types.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacekinematic__arbiter" kindref="compound">kinematic_arbiter</ref><sp/>{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">core<sp/>{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>StateSize,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ProcessModel&gt;</highlight></codeline>
<codeline lineno="31" refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter" kindref="compound">MediatedKalmanFilter</ref><sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Type<sp/>aliases</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34" refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1a010877c53e971ea72d350d6b6581a522" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1a010877c53e971ea72d350d6b6581a522" kindref="member">StateVector</ref><sp/>=<sp/>Eigen::Matrix&lt;double,<sp/>StateSize,<sp/>1&gt;;</highlight></codeline>
<codeline lineno="35" refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1a90a82e17ebf8d30c1e7600d975f0fb1e" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1a90a82e17ebf8d30c1e7600d975f0fb1e" kindref="member">StateMatrix</ref><sp/>=<sp/>Eigen::Matrix&lt;double,<sp/>StateSize,<sp/>StateSize&gt;;</highlight></codeline>
<codeline lineno="36" refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1abf94185d2347f9477222d013aa858ffc" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1abf94185d2347f9477222d013aa858ffc" kindref="member">StateFlags</ref><sp/>=<sp/>Eigen::Array&lt;bool,<sp/>StateSize,<sp/>1&gt;;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="41" refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1afa53b6f23ee08c667756ad6c2acd4568" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1afa53b6f23ee08c667756ad6c2acd4568" kindref="member">MediatedKalmanFilter</ref>(std::shared_ptr&lt;ProcessModel&gt;<sp/>process_model)</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1ab9a366cb41342ef2cd39f23236bc7f71" kindref="member">process_model_</ref>(process_model),</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1ad62715db165302f259ba9285bb1dd2ee" kindref="member">reference_time_</ref>(std::numeric_limits&lt;double&gt;::lowest()),</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1a0fe4298d48744d928989efe06f5b213c" kindref="member">max_delay_window_</ref>(1.0),</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1a3ec1d01d6f85632726d6f3155de4bff2" kindref="member">initialized_states_</ref>(<ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1abf94185d2347f9477222d013aa858ffc" kindref="member">StateFlags</ref>::Zero()),</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1a6a090d11eea0d3dacdeb57d573ebeb49" kindref="member">reference_state_</ref>(<ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1a010877c53e971ea72d350d6b6581a522" kindref="member">StateVector</ref>::Zero()),</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1ac3f995d79e6de6d6f83038797b499bba" kindref="member">reference_covariance_</ref>(<ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1a90a82e17ebf8d30c1e7600d975f0fb1e" kindref="member">StateMatrix</ref>::Identity())<sp/>{}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="52" refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1ae03760b631e2c5595e28d72f4ae9e137" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1ae03760b631e2c5595e28d72f4ae9e137" kindref="member">reset</ref>()<sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1ad62715db165302f259ba9285bb1dd2ee" kindref="member">reference_time_</ref><sp/>=<sp/>std::numeric_limits&lt;double&gt;::lowest();</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1a3ec1d01d6f85632726d6f3155de4bff2" kindref="member">initialized_states_</ref><sp/>=<sp/>StateFlags::Zero();</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1a6a090d11eea0d3dacdeb57d573ebeb49" kindref="member">reference_state_</ref><sp/>=<sp/>StateVector::Zero();</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1ac3f995d79e6de6d6f83038797b499bba" kindref="member">reference_covariance_</ref><sp/>=<sp/>StateMatrix::Identity();</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>sensor<sp/>:<sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1a25595e83553b29a3ea629be7e94b7348" kindref="member">sensors_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sensor-&gt;reset();</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1ab9a366cb41342ef2cd39f23236bc7f71" kindref="member">process_model_</ref>-&gt;reset();</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="70" refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1ad693626dcfd5ddc5e76b35a146cc7296" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1ad693626dcfd5ddc5e76b35a146cc7296" kindref="member">AddSensor</ref>(std::shared_ptr&lt;MeasurementModelInterface&gt;<sp/>sensor_model)<sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!sensor_model)<sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::invalid_argument(</highlight><highlight class="stringliteral">&quot;Cannot<sp/>add<sp/>null<sp/>sensor<sp/>model<sp/>to<sp/>filter&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sensor_index<sp/>=<sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1a25595e83553b29a3ea629be7e94b7348" kindref="member">sensors_</ref>.size();</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Store<sp/>sensor<sp/>model<sp/>and<sp/>its<sp/>type<sp/>tag</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1a25595e83553b29a3ea629be7e94b7348" kindref="member">sensors_</ref>.push_back(sensor_model);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sensor_index;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="89" refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1a1350b537bf0d4a0bfa7308c61b6a46ea" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1a1350b537bf0d4a0bfa7308c61b6a46ea" kindref="member">GetSensorPoseInBodyFrameByIndex</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sensor_index,<sp/>Eigen::Isometry3d&amp;<sp/>pose)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sensor_index<sp/>&gt;=<sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1a25595e83553b29a3ea629be7e94b7348" kindref="member">sensors_</ref>.size())<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1a25595e83553b29a3ea629be7e94b7348" kindref="member">sensors_</ref>[sensor_index]-&gt;GetSensorPoseInBodyFrame(pose);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="100" refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1aad372a7000e7629d2fd5116d36b75b4e" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1aad372a7000e7629d2fd5116d36b75b4e" kindref="member">SetSensorPoseInBodyFrameByIndex</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sensor_index,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Isometry3d&amp;<sp/>pose)<sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sensor_index<sp/>&gt;=<sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1a25595e83553b29a3ea629be7e94b7348" kindref="member">sensors_</ref>.size())<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1a25595e83553b29a3ea629be7e94b7348" kindref="member">sensors_</ref>[sensor_index]-&gt;SetSensorPoseInBodyFrame(pose);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="114" refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1aa24272033e8079022228e4f6e5765fd8" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1aa24272033e8079022228e4f6e5765fd8" kindref="member">ProcessMeasurementByIndex</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sensor_index,</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classkinematic__arbiter_1_1core_1_1MeasurementModelInterface_1a9dfbdba5f6b255c3ac4c8ca73eb58a5b" kindref="member">MeasurementModelInterface::DynamicVector</ref>&amp;<sp/>measurement,</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>timestamp)<sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sensor_index<sp/>&gt;=<sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1a25595e83553b29a3ea629be7e94b7348" kindref="member">sensors_</ref>.size())<sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Warning:<sp/>ProcessMeasurementByIndex<sp/>called<sp/>with<sp/>invalid<sp/>sensor<sp/>index:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>sensor_index<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>sensor<sp/>=<sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1a25595e83553b29a3ea629be7e94b7348" kindref="member">sensors_</ref>[sensor_index];</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>reference<sp/>time<sp/>if<sp/>not<sp/>initialized</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1ad62715db165302f259ba9285bb1dd2ee" kindref="member">reference_time_</ref><sp/>==<sp/>std::numeric_limits&lt;double&gt;::lowest())<sp/>{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1ad62715db165302f259ba9285bb1dd2ee" kindref="member">reference_time_</ref><sp/>=<sp/>timestamp;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Quick<sp/>validation<sp/>of<sp/>measurement<sp/>and<sp/>timestamp<sp/>before<sp/>any<sp/>expensive<sp/>operations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!sensor-&gt;ValidateMeasurementAndTime(measurement,<sp/>timestamp,<sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1ad62715db165302f259ba9285bb1dd2ee" kindref="member">reference_time_</ref>,<sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1a0fe4298d48744d928989efe06f5b213c" kindref="member">max_delay_window_</ref>))<sp/>{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Try<sp/>to<sp/>initialize<sp/>uninitiated<sp/>states</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1abf94185d2347f9477222d013aa858ffc" kindref="member">StateFlags</ref><sp/>initializable<sp/>=<sp/>sensor-&gt;GetInitializableStates();</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1abf94185d2347f9477222d013aa858ffc" kindref="member">StateFlags</ref><sp/>not_initialized<sp/>=<sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1a3ec1d01d6f85632726d6f3155de4bff2" kindref="member">initialized_states_</ref>.select(StateFlags::Zero(),<sp/>StateFlags::Ones());</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1abf94185d2347f9477222d013aa858ffc" kindref="member">StateFlags</ref><sp/>uninit_states<sp/>=<sp/>initializable.cwiseProduct(not_initialized);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Only<sp/>attempt<sp/>initialization<sp/>for<sp/>states<sp/>we<sp/>haven&apos;t<sp/>initialized<sp/>yet</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(uninit_states.any())<sp/>{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1abf94185d2347f9477222d013aa858ffc" kindref="member">StateFlags</ref><sp/>new_states<sp/>=<sp/>sensor-&gt;InitializeState(</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>measurement,<sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1a3ec1d01d6f85632726d6f3155de4bff2" kindref="member">initialized_states_</ref>,<sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1a6a090d11eea0d3dacdeb57d573ebeb49" kindref="member">reference_state_</ref>,<sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1ac3f995d79e6de6d6f83038797b499bba" kindref="member">reference_covariance_</ref>);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1a3ec1d01d6f85632726d6f3155de4bff2" kindref="member">initialized_states_</ref><sp/>=<sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1a3ec1d01d6f85632726d6f3155de4bff2" kindref="member">initialized_states_</ref>.cwiseMax(new_states);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dt<sp/>=<sp/>timestamp<sp/>-<sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1ad62715db165302f259ba9285bb1dd2ee" kindref="member">reference_time_</ref>;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Predict<sp/>state<sp/>to<sp/>measurement<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1a90a82e17ebf8d30c1e7600d975f0fb1e" kindref="member">StateMatrix</ref><sp/>A<sp/>=<sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1ab9a366cb41342ef2cd39f23236bc7f71" kindref="member">process_model_</ref>-&gt;GetTransitionMatrix(<ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1a6a090d11eea0d3dacdeb57d573ebeb49" kindref="member">reference_state_</ref>,<sp/>dt);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1a010877c53e971ea72d350d6b6581a522" kindref="member">StateVector</ref><sp/>state_at_sensor_time;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>state_at_sensor_time<sp/>=<sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1ab9a366cb41342ef2cd39f23236bc7f71" kindref="member">process_model_</ref>-&gt;PredictState(<ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1a6a090d11eea0d3dacdeb57d573ebeb49" kindref="member">reference_state_</ref>,<sp/>dt);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Validate<sp/>predicted<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!state_at_sensor_time.allFinite())<sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Predicted<sp/>state<sp/>contains<sp/>NaN/Inf<sp/>values<sp/>at<sp/>time<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>timestamp<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1a90a82e17ebf8d30c1e7600d975f0fb1e" kindref="member">StateMatrix</ref><sp/>Q<sp/>=<sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1ab9a366cb41342ef2cd39f23236bc7f71" kindref="member">process_model_</ref>-&gt;GetProcessNoiseCovariance(dt);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1a90a82e17ebf8d30c1e7600d975f0fb1e" kindref="member">StateMatrix</ref><sp/>covariance_at_sensor_time<sp/>=<sp/>A<sp/>*<sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1ac3f995d79e6de6d6f83038797b499bba" kindref="member">reference_covariance_</ref><sp/>*<sp/>A.transpose()<sp/>+<sp/>Q;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>covariance_at_sensor_time<sp/>=<sp/>0.5<sp/>*<sp/>(covariance_at_sensor_time<sp/>+<sp/>covariance_at_sensor_time.transpose());</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>auxiliary<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structkinematic__arbiter_1_1core_1_1MeasurementModelInterface_1_1MeasurementAuxData" kindref="compound">MeasurementModelInterface::MeasurementAuxData</ref><sp/>aux_data;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Validate<sp/>and<sp/>mediate<sp/>the<sp/>measurement</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>measurement_valid<sp/>=<sp/>sensor-&gt;ValidateAndMediate(</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state_at_sensor_time,<sp/>covariance_at_sensor_time,<sp/>timestamp,<sp/>measurement,<sp/>aux_data);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!measurement_valid)<sp/>{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::MatrixXd<sp/>PHt<sp/>=<sp/>covariance_at_sensor_time<sp/>*<sp/>aux_data.<ref refid="structkinematic__arbiter_1_1core_1_1MeasurementModelInterface_1_1MeasurementAuxData_1a5ffc53fcce9974f003d3eead2cc3615f" kindref="member">jacobian</ref>.transpose();</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::MatrixXd<sp/>K_transpose<sp/>=<sp/>aux_data.<ref refid="structkinematic__arbiter_1_1core_1_1MeasurementModelInterface_1_1MeasurementAuxData_1a6850572c55c29f12dbc26b2d6ca4568b" kindref="member">innovation_covariance</ref>.ldlt().solve(PHt.transpose());</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::MatrixXd<sp/>kalman_gain<sp/>=<sp/>K_transpose.transpose();</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>state<sp/>estimate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1a010877c53e971ea72d350d6b6581a522" kindref="member">StateVector</ref><sp/>updated_state<sp/>=<sp/>state_at_sensor_time<sp/>+<sp/>kalman_gain<sp/>*<sp/>aux_data.<ref refid="structkinematic__arbiter_1_1core_1_1MeasurementModelInterface_1_1MeasurementAuxData_1acc8b0ee39be40ad70e672bf5691d43b8" kindref="member">innovation</ref>;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>covariance<sp/>(Joseph<sp/>form<sp/>for<sp/>numerical<sp/>stability)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1a90a82e17ebf8d30c1e7600d975f0fb1e" kindref="member">StateMatrix</ref><sp/>I_KH<sp/>=<sp/>StateMatrix::Identity()<sp/>-<sp/>kalman_gain<sp/>*<sp/>aux_data.<ref refid="structkinematic__arbiter_1_1core_1_1MeasurementModelInterface_1_1MeasurementAuxData_1a5ffc53fcce9974f003d3eead2cc3615f" kindref="member">jacobian</ref>;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1a90a82e17ebf8d30c1e7600d975f0fb1e" kindref="member">StateMatrix</ref><sp/>updated_covariance<sp/>=<sp/>I_KH<sp/>*<sp/>covariance_at_sensor_time<sp/>*<sp/>I_KH.transpose()<sp/>+</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kalman_gain<sp/>*<sp/>sensor-&gt;GetMeasurementCovariance()<sp/>*<sp/>kalman_gain.transpose();</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>updated_covariance<sp/>=<sp/>0.5<sp/>*<sp/>(updated_covariance<sp/>+<sp/>updated_covariance.transpose());</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!updated_covariance.allFinite())<sp/>{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Updated<sp/>covariance<sp/>contains<sp/>NaN/Inf<sp/>values<sp/>for<sp/>at<sp/>time<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>timestamp<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>process<sp/>noise</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1ab9a366cb41342ef2cd39f23236bc7f71" kindref="member">process_model_</ref>-&gt;UpdateProcessNoise(</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state_at_sensor_time,</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>updated_state,</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sensor-&gt;GetValidationParams().process_to_measurement_noise_ratio,</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dt</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>reference<sp/>state<sp/>based<sp/>on<sp/>timestamp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(timestamp<sp/>&gt;<sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1ad62715db165302f259ba9285bb1dd2ee" kindref="member">reference_time_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1a6a090d11eea0d3dacdeb57d573ebeb49" kindref="member">reference_state_</ref><sp/>=<sp/>updated_state;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1ac3f995d79e6de6d6f83038797b499bba" kindref="member">reference_covariance_</ref><sp/>=<sp/>updated_covariance;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1ad62715db165302f259ba9285bb1dd2ee" kindref="member">reference_time_</ref><sp/>=<sp/>timestamp;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>forward_dt<sp/>=<sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1ad62715db165302f259ba9285bb1dd2ee" kindref="member">reference_time_</ref><sp/>-<sp/>timestamp;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1a6a090d11eea0d3dacdeb57d573ebeb49" kindref="member">reference_state_</ref><sp/>=<sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1ab9a366cb41342ef2cd39f23236bc7f71" kindref="member">process_model_</ref>-&gt;PredictState(updated_state,<sp/>forward_dt);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1a6a090d11eea0d3dacdeb57d573ebeb49" kindref="member">reference_state_</ref>.allFinite())<sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Forward<sp/>propagation<sp/>produced<sp/>invalid<sp/>state<sp/>for<sp/>at<sp/>time<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>timestamp<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1a90a82e17ebf8d30c1e7600d975f0fb1e" kindref="member">StateMatrix</ref><sp/>A_forward<sp/>=<sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1ab9a366cb41342ef2cd39f23236bc7f71" kindref="member">process_model_</ref>-&gt;GetTransitionMatrix(updated_state,<sp/>forward_dt);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1a90a82e17ebf8d30c1e7600d975f0fb1e" kindref="member">StateMatrix</ref><sp/>Q_forward<sp/>=<sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1ab9a366cb41342ef2cd39f23236bc7f71" kindref="member">process_model_</ref>-&gt;GetProcessNoiseCovariance(forward_dt);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1ac3f995d79e6de6d6f83038797b499bba" kindref="member">reference_covariance_</ref><sp/>=<sp/>A_forward<sp/>*<sp/>updated_covariance<sp/>*<sp/>A_forward.transpose()<sp/>+<sp/>Q_forward;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1ac3f995d79e6de6d6f83038797b499bba" kindref="member">reference_covariance_</ref><sp/>=<sp/>0.5<sp/>*<sp/>(<ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1ac3f995d79e6de6d6f83038797b499bba" kindref="member">reference_covariance_</ref><sp/>+<sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1ac3f995d79e6de6d6f83038797b499bba" kindref="member">reference_covariance_</ref>.transpose());</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="231" refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1a2e8b9123e0aa4aa9befe740a3c705137" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1a010877c53e971ea72d350d6b6581a522" kindref="member">StateVector</ref><sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1a2e8b9123e0aa4aa9befe740a3c705137" kindref="member">GetStateEstimate</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>timestamp<sp/>=<sp/>-1.0)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(timestamp<sp/>&lt;<sp/>0.0<sp/>||<sp/>timestamp<sp/>==<sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1ad62715db165302f259ba9285bb1dd2ee" kindref="member">reference_time_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1a6a090d11eea0d3dacdeb57d573ebeb49" kindref="member">reference_state_</ref>;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Predict<sp/>state<sp/>to<sp/>requested<sp/>time<sp/>without<sp/>changing<sp/>reference</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dt<sp/>=<sp/>timestamp<sp/>-<sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1ad62715db165302f259ba9285bb1dd2ee" kindref="member">reference_time_</ref>;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1ab9a366cb41342ef2cd39f23236bc7f71" kindref="member">process_model_</ref>-&gt;PredictState(<ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1a6a090d11eea0d3dacdeb57d573ebeb49" kindref="member">reference_state_</ref>,<sp/>dt);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="244" refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1a9c19b50be8d81cb1189fb9b1915d5ab2" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1a90a82e17ebf8d30c1e7600d975f0fb1e" kindref="member">StateMatrix</ref><sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1a9c19b50be8d81cb1189fb9b1915d5ab2" kindref="member">GetStateCovariance</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>timestamp<sp/>=<sp/>-1.0)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(timestamp<sp/>&lt;<sp/>0.0<sp/>||<sp/>timestamp<sp/>==<sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1ad62715db165302f259ba9285bb1dd2ee" kindref="member">reference_time_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1ac3f995d79e6de6d6f83038797b499bba" kindref="member">reference_covariance_</ref>;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Predict<sp/>covariance<sp/>to<sp/>requested<sp/>time<sp/>without<sp/>changing<sp/>reference</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dt<sp/>=<sp/>timestamp<sp/>-<sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1ad62715db165302f259ba9285bb1dd2ee" kindref="member">reference_time_</ref>;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1a90a82e17ebf8d30c1e7600d975f0fb1e" kindref="member">StateMatrix</ref><sp/>A<sp/>=<sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1ab9a366cb41342ef2cd39f23236bc7f71" kindref="member">process_model_</ref>-&gt;GetTransitionMatrix(<ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1a6a090d11eea0d3dacdeb57d573ebeb49" kindref="member">reference_state_</ref>,<sp/>dt);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1a90a82e17ebf8d30c1e7600d975f0fb1e" kindref="member">StateMatrix</ref><sp/>Q<sp/>=<sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1ab9a366cb41342ef2cd39f23236bc7f71" kindref="member">process_model_</ref>-&gt;GetProcessNoiseCovariance(dt);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>A<sp/>*<sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1ac3f995d79e6de6d6f83038797b499bba" kindref="member">reference_covariance_</ref><sp/>*<sp/>A.transpose()<sp/>+<sp/>Q;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="259" refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1af3e1b6b4a5940c1b728fbd23b57ed8a7" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1af3e1b6b4a5940c1b728fbd23b57ed8a7" kindref="member">SetStateEstimate</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1a010877c53e971ea72d350d6b6581a522" kindref="member">StateVector</ref>&amp;<sp/>state,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>timestamp,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1a90a82e17ebf8d30c1e7600d975f0fb1e" kindref="member">StateMatrix</ref>&amp;<sp/>covariance=StateMatrix::Identity())<sp/>{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1a6a090d11eea0d3dacdeb57d573ebeb49" kindref="member">reference_state_</ref><sp/>=<sp/>state;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1a3ec1d01d6f85632726d6f3155de4bff2" kindref="member">initialized_states_</ref><sp/>=<sp/>StateFlags::Ones();</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1ad62715db165302f259ba9285bb1dd2ee" kindref="member">reference_time_</ref><sp/>=<sp/>timestamp;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1ac3f995d79e6de6d6f83038797b499bba" kindref="member">reference_covariance_</ref><sp/>=<sp/>covariance;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="269" refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1a7b4ef93886f9edac9c9b17405efb961b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1a7b4ef93886f9edac9c9b17405efb961b" kindref="member">GetCurrentTime</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1ad62715db165302f259ba9285bb1dd2ee" kindref="member">reference_time_</ref>;<sp/>}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="274" refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1ae071f5515d1cd57946a622f89d1ad3d9" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1ae071f5515d1cd57946a622f89d1ad3d9" kindref="member">SetMaxDelayWindow</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>window)<sp/>{<sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1a0fe4298d48744d928989efe06f5b213c" kindref="member">max_delay_window_</ref><sp/>=<sp/>window;<sp/>}</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>IsInitialized<sp/>to<sp/>check<sp/>if<sp/>any<sp/>states<sp/>are<sp/>initialized</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278" refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1abb51c9b7b9e5599bdeafd8af87db11fd" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1abb51c9b7b9e5599bdeafd8af87db11fd" kindref="member">IsInitialized</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1a3ec1d01d6f85632726d6f3155de4bff2" kindref="member">initialized_states_</ref>.any();<sp/>}</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="288" refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1ae29de60fbbadf45ed3b9121624818ee9" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1ae29de60fbbadf45ed3b9121624818ee9" kindref="member">PredictNewReference</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>timestamp)<sp/>{</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dt<sp/>=<sp/>timestamp<sp/>-<sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1ad62715db165302f259ba9285bb1dd2ee" kindref="member">reference_time_</ref>;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1a6a090d11eea0d3dacdeb57d573ebeb49" kindref="member">reference_state_</ref><sp/>=<sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1ab9a366cb41342ef2cd39f23236bc7f71" kindref="member">process_model_</ref>-&gt;PredictState(<ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1a6a090d11eea0d3dacdeb57d573ebeb49" kindref="member">reference_state_</ref>,<sp/>dt);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1a90a82e17ebf8d30c1e7600d975f0fb1e" kindref="member">StateMatrix</ref><sp/>A<sp/>=<sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1ab9a366cb41342ef2cd39f23236bc7f71" kindref="member">process_model_</ref>-&gt;GetTransitionMatrix(<ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1a6a090d11eea0d3dacdeb57d573ebeb49" kindref="member">reference_state_</ref>,<sp/>dt);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1a90a82e17ebf8d30c1e7600d975f0fb1e" kindref="member">StateMatrix</ref><sp/>Q<sp/>=<sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1ab9a366cb41342ef2cd39f23236bc7f71" kindref="member">process_model_</ref>-&gt;GetProcessNoiseCovariance(dt);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1ac3f995d79e6de6d6f83038797b499bba" kindref="member">reference_covariance_</ref><sp/>=<sp/>A<sp/>*<sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1ac3f995d79e6de6d6f83038797b499bba" kindref="member">reference_covariance_</ref><sp/>*<sp/>A.transpose()<sp/>+<sp/>Q;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1ad62715db165302f259ba9285bb1dd2ee" kindref="member">reference_time_</ref><sp/>=<sp/>timestamp;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="303" refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1a98c6df3f49307d26042ae7b89de41f87" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1a98c6df3f49307d26042ae7b89de41f87" kindref="member">GetSensorCovarianceByIndex</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sensor_index,</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classkinematic__arbiter_1_1core_1_1MeasurementModelInterface_1a5f3205482e9935a1dcdecb315ed2c72c" kindref="member">MeasurementModelInterface::DynamicCovariance</ref>&amp;<sp/>covariance)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sensor_index<sp/>&gt;=<sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1a25595e83553b29a3ea629be7e94b7348" kindref="member">sensors_</ref>.size())<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;}</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>covariance<sp/>=<sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1a25595e83553b29a3ea629be7e94b7348" kindref="member">sensors_</ref>[sensor_index]-&gt;GetMeasurementCovariance();</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="317" refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1ac46df7e94cee7cdedbde395d63ab7dc7" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1ac46df7e94cee7cdedbde395d63ab7dc7" kindref="member">GetExpectedMeasurementByIndex</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sensor_index,</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classkinematic__arbiter_1_1core_1_1MeasurementModelInterface_1a9dfbdba5f6b255c3ac4c8ca73eb58a5b" kindref="member">MeasurementModelInterface::DynamicVector</ref>&amp;<sp/>expected_measurement)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sensor_index<sp/>&gt;=<sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1a25595e83553b29a3ea629be7e94b7348" kindref="member">sensors_</ref>.size())<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;}</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>expected_measurement<sp/>=<sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1a25595e83553b29a3ea629be7e94b7348" kindref="member">sensors_</ref>[sensor_index]-&gt;PredictMeasurement(<ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1a6a090d11eea0d3dacdeb57d573ebeb49" kindref="member">reference_state_</ref>);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="331" refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1a28b4c6133b6013b376db8f267c8fef24" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1a28b4c6133b6013b376db8f267c8fef24" kindref="member">GetExpectedMeasurementByIndex</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sensor_index,</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classkinematic__arbiter_1_1core_1_1MeasurementModelInterface_1a9dfbdba5f6b255c3ac4c8ca73eb58a5b" kindref="member">MeasurementModelInterface::DynamicVector</ref>&amp;<sp/>expected_measurement,</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1a010877c53e971ea72d350d6b6581a522" kindref="member">StateVector</ref>&amp;<sp/>state_at_sensor_time)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sensor_index<sp/>&gt;=<sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1a25595e83553b29a3ea629be7e94b7348" kindref="member">sensors_</ref>.size())<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;}</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>expected_measurement<sp/>=<sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1a25595e83553b29a3ea629be7e94b7348" kindref="member">sensors_</ref>[sensor_index]-&gt;PredictMeasurement(state_at_sensor_time);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Private<sp/>data<sp/>members</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342" refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1ab9a366cb41342ef2cd39f23236bc7f71" refkind="member"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;ProcessModel&gt;<sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1ab9a366cb41342ef2cd39f23236bc7f71" kindref="member">process_model_</ref>;</highlight></codeline>
<codeline lineno="343" refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1a25595e83553b29a3ea629be7e94b7348" refkind="member"><highlight class="normal"><sp/><sp/>std::vector&lt;std::shared_ptr&lt;MeasurementModelInterface&gt;&gt;<sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1a25595e83553b29a3ea629be7e94b7348" kindref="member">sensors_</ref>;</highlight></codeline>
<codeline lineno="344" refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1ad62715db165302f259ba9285bb1dd2ee" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1ad62715db165302f259ba9285bb1dd2ee" kindref="member">reference_time_</ref>;</highlight></codeline>
<codeline lineno="345" refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1a0fe4298d48744d928989efe06f5b213c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1a0fe4298d48744d928989efe06f5b213c" kindref="member">max_delay_window_</ref>;</highlight></codeline>
<codeline lineno="346" refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1a3ec1d01d6f85632726d6f3155de4bff2" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1abf94185d2347f9477222d013aa858ffc" kindref="member">StateFlags</ref><sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1a3ec1d01d6f85632726d6f3155de4bff2" kindref="member">initialized_states_</ref>;</highlight></codeline>
<codeline lineno="347" refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1a6a090d11eea0d3dacdeb57d573ebeb49" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1a010877c53e971ea72d350d6b6581a522" kindref="member">StateVector</ref><sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1a6a090d11eea0d3dacdeb57d573ebeb49" kindref="member">reference_state_</ref>;</highlight></codeline>
<codeline lineno="348" refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1ac3f995d79e6de6d6f83038797b499bba" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1a90a82e17ebf8d30c1e7600d975f0fb1e" kindref="member">StateMatrix</ref><sp/><ref refid="classkinematic__arbiter_1_1core_1_1MediatedKalmanFilter_1ac3f995d79e6de6d6f83038797b499bba" kindref="member">reference_covariance_</ref>;</highlight></codeline>
<codeline lineno="349"><highlight class="normal">};</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>core</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>kinematic_arbiter</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/spencer/ros2workspace/src/kinematic_arbiter/include/kinematic_arbiter/core/mediated_kalman_filter.hpp"/>
  </compounddef>
</doxygen>
