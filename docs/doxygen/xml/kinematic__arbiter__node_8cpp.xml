<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="kinematic__arbiter__node_8cpp" kind="file" language="C++">
    <compoundname>kinematic_arbiter_node.cpp</compoundname>
    <includes refid="kinematic__arbiter__node_8hpp" local="yes">kinematic_arbiter/ros2/kinematic_arbiter_node.hpp</includes>
    <includes refid="rigid__body__state__model_8hpp" local="yes">kinematic_arbiter/models/rigid_body_state_model.hpp</includes>
    <includes local="yes">std_srvs/srv/trigger.hpp</includes>
    <incdepgraph>
      <node id="18">
        <label>kinematic_arbiter/core/state_index.hpp</label>
        <link refid="state__index_8hpp"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>kinematic_arbiter/ros2/ros2_utils.hpp</label>
        <link refid="ros2__utils_8hpp"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>limits</label>
      </node>
      <node id="41">
        <label>geometry_msgs/msg/pose_stamped.hpp</label>
      </node>
      <node id="33">
        <label>kinematic_arbiter/core/mediation_types.hpp</label>
        <link refid="mediation__types_8hpp"/>
      </node>
      <node id="38">
        <label>kinematic_arbiter/ros2/position_sensor_handler.hpp</label>
        <link refid="position__sensor__handler_8hpp"/>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>Eigen/Geometry</label>
      </node>
      <node id="43">
        <label>geometry_msgs/msg/transform_stamped.hpp</label>
      </node>
      <node id="17">
        <label>cmath</label>
      </node>
      <node id="24">
        <label>stdexcept</label>
      </node>
      <node id="53">
        <label>Eigen/Core</label>
      </node>
      <node id="30">
        <label>boost/math/distributions/chi_squared.hpp</label>
      </node>
      <node id="4">
        <label>string</label>
      </node>
      <node id="52">
        <label>kinematic_arbiter/sensors/imu_sensor_model.hpp</label>
        <link refid="imu__sensor__model_8hpp"/>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>map</label>
      </node>
      <node id="9">
        <label>geometry_msgs/msg/accel_with_covariance_stamped.hpp</label>
      </node>
      <node id="6">
        <label>rclcpp/rclcpp.hpp</label>
      </node>
      <node id="49">
        <label>kinematic_arbiter/ros2/velocity_sensor_handler.hpp</label>
        <link refid="velocity__sensor__handler_8hpp"/>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>geometry_msgs/msg/twist_stamped.hpp</label>
      </node>
      <node id="47">
        <label>kinematic_arbiter/ros2/pose_sensor_handler.hpp</label>
        <link refid="pose__sensor__handler_8hpp"/>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
      </node>
      <node id="51">
        <label>kinematic_arbiter/ros2/imu_sensor_handler.hpp</label>
        <link refid="imu__sensor__handler_8hpp"/>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>random</label>
      </node>
      <node id="16">
        <label>Eigen/Dense</label>
      </node>
      <node id="31">
        <label>kinematic_arbiter/core/measurement_model_interface.hpp</label>
        <link refid="measurement__model__interface_8hpp"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>kinematic_arbiter/ros2/sensor_handler.hpp</label>
        <link refid="sensor__handler_8hpp"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>std_srvs/srv/trigger.hpp</label>
      </node>
      <node id="50">
        <label>kinematic_arbiter/sensors/body_velocity_sensor_model.hpp</label>
        <link refid="body__velocity__sensor__model_8hpp"/>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>tuple</label>
      </node>
      <node id="28">
        <label>optional</label>
      </node>
      <node id="54">
        <label>kinematic_arbiter/sensors/imu_bias_estimator.hpp</label>
        <link refid="imu__bias__estimator_8hpp"/>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>vector</label>
      </node>
      <node id="8">
        <label>geometry_msgs/msg/twist_with_covariance_stamped.hpp</label>
      </node>
      <node id="37">
        <label>kinematic_arbiter/core/sensor_types.hpp</label>
        <link refid="sensor__types_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>kinematic_arbiter/sensors/position_sensor_model.hpp</label>
        <link refid="position__sensor__model_8hpp"/>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>kinematic_arbiter/core/statistical_utils.hpp</label>
        <link refid="statistical__utils_8hpp"/>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>array</label>
      </node>
      <node id="1">
        <label>/home/spencer/ros2workspace/src/kinematic_arbiter/src/ros2/kinematic_arbiter_node.cpp</label>
        <link refid="kinematic__arbiter__node_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="39">
        <label>geometry_msgs/msg/point_stamped.hpp</label>
      </node>
      <node id="15">
        <label>kinematic_arbiter/core/state_model_interface.hpp</label>
        <link refid="state__model__interface_8hpp"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>kinematic_arbiter/core/mediated_kalman_filter.hpp</label>
        <link refid="mediated__kalman__filter_8hpp"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>iostream</label>
      </node>
      <node id="19">
        <label>cstddef</label>
      </node>
      <node id="25">
        <label>deque</label>
      </node>
      <node id="20">
        <label>unordered_map</label>
      </node>
      <node id="10">
        <label>tf2_ros/transform_listener.h</label>
      </node>
      <node id="7">
        <label>geometry_msgs/msg/pose_with_covariance_stamped.hpp</label>
      </node>
      <node id="29">
        <label>type_traits</label>
      </node>
      <node id="11">
        <label>tf2_ros/buffer.h</label>
      </node>
      <node id="48">
        <label>kinematic_arbiter/sensors/pose_sensor_model.hpp</label>
        <link refid="pose__sensor__model_8hpp"/>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>kinematic_arbiter/models/rigid_body_state_model.hpp</label>
        <link refid="rigid__body__state__model_8hpp"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>memory</label>
      </node>
      <node id="13">
        <label>kinematic_arbiter/ros2/filter_wrapper.hpp</label>
        <link refid="filter__wrapper_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>sensor_msgs/msg/imu.hpp</label>
      </node>
      <node id="2">
        <label>kinematic_arbiter/ros2/kinematic_arbiter_node.hpp</label>
        <link refid="kinematic__arbiter__node_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacekinematic__arbiter">kinematic_arbiter</innernamespace>
    <innernamespace refid="namespacekinematic__arbiter_1_1ros2">kinematic_arbiter::ros2</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="kinematic__arbiter__node_8hpp" kindref="compound">kinematic_arbiter/ros2/kinematic_arbiter_node.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="rigid__body__state__model_8hpp" kindref="compound">kinematic_arbiter/models/rigid_body_state_model.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;std_srvs/srv/trigger.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacekinematic__arbiter" kindref="compound">kinematic_arbiter</ref><sp/>{</highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">ros2<sp/>{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8" refid="classkinematic__arbiter_1_1ros2_1_1KinematicArbiterNode_1a1771f3ca549f8e3731c83dc7a15584f5" refkind="member"><highlight class="normal"><ref refid="classkinematic__arbiter_1_1ros2_1_1KinematicArbiterNode_1a1771f3ca549f8e3731c83dc7a15584f5" kindref="member">KinematicArbiterNode::KinematicArbiterNode</ref>()</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>Node(</highlight><highlight class="stringliteral">&quot;kinematic_arbiter&quot;</highlight><highlight class="normal">,<sp/>rclcpp::NodeOptions().allow_undeclared_parameters(true)</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.automatically_declare_parameters_from_overrides(true))<sp/>{</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Print<sp/>node<sp/>name<sp/>and<sp/>namespace<sp/>for<sp/>debugging</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/>RCLCPP_INFO(this-&gt;get_logger(),<sp/></highlight><highlight class="stringliteral">&quot;Node<sp/>name:<sp/>&apos;%s&apos;,<sp/>namespace:<sp/>&apos;%s&apos;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;get_name(),<sp/>this-&gt;get_namespace());</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Dump<sp/>all<sp/>available<sp/>parameters<sp/>at<sp/>root<sp/>level<sp/>for<sp/>debugging</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>all_params<sp/>=<sp/>this-&gt;list_parameters({},<sp/>0);</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/>RCLCPP_INFO(this-&gt;get_logger(),<sp/></highlight><highlight class="stringliteral">&quot;Root<sp/>parameters<sp/>available<sp/>(%zu):&quot;</highlight><highlight class="normal">,<sp/>all_params.names.size());</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>name<sp/>:<sp/>all_params.names)<sp/>{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>RCLCPP_INFO(this-&gt;get_logger(),<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>%s&quot;</highlight><highlight class="normal">,<sp/>name.c_str());</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>List<sp/>all<sp/>parameter<sp/>prefixes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>all_prefixes<sp/>=<sp/>this-&gt;list_parameters({},<sp/>1).prefixes;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/>RCLCPP_INFO(this-&gt;get_logger(),<sp/></highlight><highlight class="stringliteral">&quot;Parameter<sp/>prefixes<sp/>(%zu):&quot;</highlight><highlight class="normal">,<sp/>all_prefixes.size());</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>prefix<sp/>:<sp/>all_prefixes)<sp/>{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>RCLCPP_INFO(this-&gt;get_logger(),<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>%s&quot;</highlight><highlight class="normal">,<sp/>prefix.c_str());</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>basic<sp/>parameters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><ref refid="classkinematic__arbiter_1_1ros2_1_1KinematicArbiterNode_1a96ef95733f00e61f69c45e4611a6f39a" kindref="member">publish_rate_</ref><sp/>=<sp/>this-&gt;get_parameter(</highlight><highlight class="stringliteral">&quot;publish_rate&quot;</highlight><highlight class="normal">).as_double();</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>max_delay_window<sp/>=<sp/>this-&gt;get_parameter(</highlight><highlight class="stringliteral">&quot;max_delay_window&quot;</highlight><highlight class="normal">).as_double();</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><ref refid="classkinematic__arbiter_1_1ros2_1_1KinematicArbiterNode_1a1d860aa7fe3e28520ca67ac6198c0516" kindref="member">world_frame_id_</ref><sp/>=<sp/>this-&gt;get_parameter(</highlight><highlight class="stringliteral">&quot;world_frame_id&quot;</highlight><highlight class="normal">).as_string();</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><ref refid="classkinematic__arbiter_1_1ros2_1_1KinematicArbiterNode_1a662e74da74772c89eb9d395f4cd5266c" kindref="member">body_frame_id_</ref><sp/>=<sp/>this-&gt;get_parameter(</highlight><highlight class="stringliteral">&quot;body_frame_id&quot;</highlight><highlight class="normal">).as_string();</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>process<sp/>noise<sp/>window<sp/>parameter<sp/>(use<sp/>get_parameter<sp/>instead<sp/>of<sp/>declare_parameter)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>process_noise_window<sp/>=<sp/>500;<sp/></highlight><highlight class="comment">//<sp/>Default<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;has_parameter(</highlight><highlight class="stringliteral">&quot;process_noise_window&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>process_noise_window<sp/>=<sp/>this-&gt;get_parameter(</highlight><highlight class="stringliteral">&quot;process_noise_window&quot;</highlight><highlight class="normal">).as_int();</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/>RCLCPP_INFO(this-&gt;get_logger(),<sp/></highlight><highlight class="stringliteral">&quot;Process<sp/>noise<sp/>window:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>process_noise_window);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>topic<sp/>names</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/>std::string<sp/>pose_topic<sp/>=<sp/>this-&gt;get_parameter(</highlight><highlight class="stringliteral">&quot;pose_state_topic&quot;</highlight><highlight class="normal">).as_string();</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/>std::string<sp/>velocity_topic<sp/>=<sp/>this-&gt;get_parameter(</highlight><highlight class="stringliteral">&quot;velocity_state_topic&quot;</highlight><highlight class="normal">).as_string();</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>std::string<sp/>acceleration_topic<sp/>=<sp/>this-&gt;get_parameter(</highlight><highlight class="stringliteral">&quot;acceleration_state_topic&quot;</highlight><highlight class="normal">).as_string();</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>up<sp/>TF<sp/>components</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><ref refid="classkinematic__arbiter_1_1ros2_1_1KinematicArbiterNode_1a86531b38e3487a4d2d0c3ebbc0cb60a6" kindref="member">tf_buffer_</ref><sp/>=<sp/>std::make_shared&lt;tf2_ros::Buffer&gt;(this-&gt;get_clock());</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><ref refid="classkinematic__arbiter_1_1ros2_1_1KinematicArbiterNode_1afee59c24a0cb618afa756fcdff8ed593" kindref="member">tf_listener_</ref><sp/>=<sp/>std::make_shared&lt;tf2_ros::TransformListener&gt;(*<ref refid="classkinematic__arbiter_1_1ros2_1_1KinematicArbiterNode_1a86531b38e3487a4d2d0c3ebbc0cb60a6" kindref="member">tf_buffer_</ref>);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>publishers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><ref refid="classkinematic__arbiter_1_1ros2_1_1KinematicArbiterNode_1abbe7e9f37fe57641d9d9276ef2aaaacd" kindref="member">pose_pub_</ref><sp/>=<sp/>this-&gt;create_publisher&lt;geometry_msgs::msg::PoseWithCovarianceStamped&gt;(</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pose_topic,<sp/>10);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><ref refid="classkinematic__arbiter_1_1ros2_1_1KinematicArbiterNode_1a0ef4e2f29d4b1d31d750a72500a6be46" kindref="member">velocity_pub_</ref><sp/>=<sp/>this-&gt;create_publisher&lt;geometry_msgs::msg::TwistWithCovarianceStamped&gt;(</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>velocity_topic,<sp/>10);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><ref refid="classkinematic__arbiter_1_1ros2_1_1KinematicArbiterNode_1a3eaaf1ac9110dd6060933424965d3d89" kindref="member">accel_pub_</ref><sp/>=<sp/>this-&gt;create_publisher&lt;geometry_msgs::msg::AccelWithCovarianceStamped&gt;(</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>acceleration_topic,<sp/>10);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>state<sp/>model<sp/>parameters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><ref refid="structkinematic__arbiter_1_1core_1_1StateModelInterface_1_1Params" kindref="compound">::kinematic_arbiter::models::RigidBodyStateModel::Params</ref><sp/>model_params;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>model_params.<ref refid="structkinematic__arbiter_1_1core_1_1StateModelInterface_1_1Params_1a650bddc23959713130e3a0c564de5af1" kindref="member">process_noise_window</ref><sp/>=<sp/>process_noise_window;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>initial<sp/>process<sp/>noise<sp/>values<sp/>with<sp/>defaults</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>model_params.<ref refid="structkinematic__arbiter_1_1core_1_1StateModelInterface_1_1Params_1a36d6891ed987ad84626c353209e93d62" kindref="member">position_uncertainty_per_second</ref><sp/>=</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;get_parameter_or(</highlight><highlight class="stringliteral">&quot;position_uncertainty_per_second&quot;</highlight><highlight class="normal">,<sp/>0.01);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>model_params.<ref refid="structkinematic__arbiter_1_1core_1_1StateModelInterface_1_1Params_1aeb7691c587b5780480a2bbccae6d7f59" kindref="member">orientation_uncertainty_per_second</ref><sp/>=</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;get_parameter_or(</highlight><highlight class="stringliteral">&quot;orientation_uncertainty_per_second&quot;</highlight><highlight class="normal">,<sp/>0.01);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>model_params.<ref refid="structkinematic__arbiter_1_1core_1_1StateModelInterface_1_1Params_1a20a9ab420ec092fe827450eba25d39f2" kindref="member">linear_velocity_uncertainty_per_second</ref><sp/>=</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;get_parameter_or(</highlight><highlight class="stringliteral">&quot;linear_velocity_uncertainty_per_second&quot;</highlight><highlight class="normal">,<sp/>0.1);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/>model_params.<ref refid="structkinematic__arbiter_1_1core_1_1StateModelInterface_1_1Params_1a86360392fa8acb4d1fbf772dc07a57d2" kindref="member">angular_velocity_uncertainty_per_second</ref><sp/>=</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;get_parameter_or(</highlight><highlight class="stringliteral">&quot;angular_velocity_uncertainty_per_second&quot;</highlight><highlight class="normal">,<sp/>0.1);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>model_params.<ref refid="structkinematic__arbiter_1_1core_1_1StateModelInterface_1_1Params_1ab888b7db255ed7924d57bfef6315bcc3" kindref="member">linear_acceleration_uncertainty_per_second</ref><sp/>=</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;get_parameter_or(</highlight><highlight class="stringliteral">&quot;linear_acceleration_uncertainty_per_second&quot;</highlight><highlight class="normal">,<sp/>1.0);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>model_params.<ref refid="structkinematic__arbiter_1_1core_1_1StateModelInterface_1_1Params_1a73690c6a07d29e4abca0afc538679dff" kindref="member">angular_acceleration_uncertainty_per_second</ref><sp/>=</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;get_parameter_or(</highlight><highlight class="stringliteral">&quot;angular_acceleration_uncertainty_per_second&quot;</highlight><highlight class="normal">,<sp/>1.0);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>RCLCPP_INFO(this-&gt;get_logger(),<sp/></highlight><highlight class="stringliteral">&quot;Initial<sp/>process<sp/>noise<sp/>settings:&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>RCLCPP_INFO(this-&gt;get_logger(),<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Position:<sp/>%.4f&quot;</highlight><highlight class="normal">,<sp/>model_params.<ref refid="structkinematic__arbiter_1_1core_1_1StateModelInterface_1_1Params_1a36d6891ed987ad84626c353209e93d62" kindref="member">position_uncertainty_per_second</ref>);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>RCLCPP_INFO(this-&gt;get_logger(),<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Orientation:<sp/>%.4f&quot;</highlight><highlight class="normal">,<sp/>model_params.<ref refid="structkinematic__arbiter_1_1core_1_1StateModelInterface_1_1Params_1aeb7691c587b5780480a2bbccae6d7f59" kindref="member">orientation_uncertainty_per_second</ref>);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>RCLCPP_INFO(this-&gt;get_logger(),<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Linear<sp/>velocity:<sp/>%.4f&quot;</highlight><highlight class="normal">,<sp/>model_params.<ref refid="structkinematic__arbiter_1_1core_1_1StateModelInterface_1_1Params_1a20a9ab420ec092fe827450eba25d39f2" kindref="member">linear_velocity_uncertainty_per_second</ref>);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>RCLCPP_INFO(this-&gt;get_logger(),<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Angular<sp/>velocity:<sp/>%.4f&quot;</highlight><highlight class="normal">,<sp/>model_params.<ref refid="structkinematic__arbiter_1_1core_1_1StateModelInterface_1_1Params_1a86360392fa8acb4d1fbf772dc07a57d2" kindref="member">angular_velocity_uncertainty_per_second</ref>);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>RCLCPP_INFO(this-&gt;get_logger(),<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Linear<sp/>acceleration:<sp/>%.4f&quot;</highlight><highlight class="normal">,<sp/>model_params.<ref refid="structkinematic__arbiter_1_1core_1_1StateModelInterface_1_1Params_1ab888b7db255ed7924d57bfef6315bcc3" kindref="member">linear_acceleration_uncertainty_per_second</ref>);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>RCLCPP_INFO(this-&gt;get_logger(),<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Angular<sp/>acceleration:<sp/>%.4f&quot;</highlight><highlight class="normal">,<sp/>model_params.<ref refid="structkinematic__arbiter_1_1core_1_1StateModelInterface_1_1Params_1a73690c6a07d29e4abca0afc538679dff" kindref="member">angular_acceleration_uncertainty_per_second</ref>);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>filter<sp/>wrapper</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><ref refid="classkinematic__arbiter_1_1ros2_1_1KinematicArbiterNode_1a52faaa348228ea7c7812f574208431a3" kindref="member">filter_wrapper_</ref><sp/>=<sp/>std::make_unique&lt;FilterWrapper&gt;(</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classkinematic__arbiter_1_1ros2_1_1KinematicArbiterNode_1a86531b38e3487a4d2d0c3ebbc0cb60a6" kindref="member">tf_buffer_</ref>,</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>model_params,</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classkinematic__arbiter_1_1ros2_1_1KinematicArbiterNode_1a662e74da74772c89eb9d395f4cd5266c" kindref="member">body_frame_id_</ref>,</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classkinematic__arbiter_1_1ros2_1_1KinematicArbiterNode_1a1d860aa7fe3e28520ca67ac6198c0516" kindref="member">world_frame_id_</ref>);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>max<sp/>delay<sp/>window</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><ref refid="classkinematic__arbiter_1_1ros2_1_1KinematicArbiterNode_1a52faaa348228ea7c7812f574208431a3" kindref="member">filter_wrapper_</ref>-&gt;setMaxDelayWindow(max_delay_window);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Configure<sp/>sensors<sp/>-<sp/>now<sp/>using<sp/>the<sp/>direct<sp/>approach<sp/>with<sp/>loaded<sp/>parameters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><ref refid="classkinematic__arbiter_1_1ros2_1_1KinematicArbiterNode_1a85473ab7f0e6c297de92a046cba32b33" kindref="member">configureSensorsFromLoadedParams</ref>();</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>timer<sp/>for<sp/>publishing<sp/>estimates</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><ref refid="classkinematic__arbiter_1_1ros2_1_1KinematicArbiterNode_1a9762ce973e471ff87b88b10b0ff9c0da" kindref="member">publish_timer_</ref><sp/>=<sp/>this-&gt;create_wall_timer(</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::chrono::duration&lt;double&gt;(1.0<sp/>/<sp/><ref refid="classkinematic__arbiter_1_1ros2_1_1KinematicArbiterNode_1a96ef95733f00e61f69c45e4611a6f39a" kindref="member">publish_rate_</ref>),</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::bind(&amp;<ref refid="classkinematic__arbiter_1_1ros2_1_1KinematicArbiterNode_1a3ab1d18d88852ef31e3cb08631bf35f1" kindref="member">KinematicArbiterNode::publishEstimates</ref>,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>RCLCPP_INFO(this-&gt;get_logger(),<sp/></highlight><highlight class="stringliteral">&quot;KinematicArbiterNode<sp/>initialized<sp/>with<sp/>world<sp/>frame<sp/>&apos;%s&apos;<sp/>and<sp/>body<sp/>frame<sp/>&apos;%s&apos;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classkinematic__arbiter_1_1ros2_1_1KinematicArbiterNode_1a1d860aa7fe3e28520ca67ac6198c0516" kindref="member">world_frame_id_</ref>.c_str(),<sp/><ref refid="classkinematic__arbiter_1_1ros2_1_1KinematicArbiterNode_1a662e74da74772c89eb9d395f4cd5266c" kindref="member">body_frame_id_</ref>.c_str());</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>these<sp/>lines<sp/>to<sp/>set<sp/>up<sp/>true<sp/>state<sp/>subscribers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>subscribers<sp/>for<sp/>true<sp/>pose<sp/>and<sp/>velocity<sp/>if<sp/>topics<sp/>are<sp/>specified</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;has_parameter(</highlight><highlight class="stringliteral">&quot;truth_pose_topic&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>truth_pose_topic<sp/>=<sp/>this-&gt;get_parameter(</highlight><highlight class="stringliteral">&quot;truth_pose_topic&quot;</highlight><highlight class="normal">).as_string();</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!truth_pose_topic.empty())<sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RCLCPP_INFO(this-&gt;get_logger(),<sp/></highlight><highlight class="stringliteral">&quot;Subscribing<sp/>to<sp/>true<sp/>pose<sp/>topic:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>truth_pose_topic.c_str());</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classkinematic__arbiter_1_1ros2_1_1KinematicArbiterNode_1a92e3ced23fcf59a648f8268f5095d567" kindref="member">truth_pose_sub_</ref><sp/>=<sp/>this-&gt;create_subscription&lt;geometry_msgs::msg::PoseStamped&gt;(</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>truth_pose_topic,<sp/>10,</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::bind(&amp;<ref refid="classkinematic__arbiter_1_1ros2_1_1KinematicArbiterNode_1ab23bb37f4135e0b8b1d32eb831fa0d92" kindref="member">KinematicArbiterNode::truthPoseCallback</ref>,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>std::placeholders::_1));</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;has_parameter(</highlight><highlight class="stringliteral">&quot;truth_velocity_topic&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>truth_velocity_topic<sp/>=<sp/>this-&gt;get_parameter(</highlight><highlight class="stringliteral">&quot;truth_velocity_topic&quot;</highlight><highlight class="normal">).as_string();</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!truth_velocity_topic.empty())<sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RCLCPP_INFO(this-&gt;get_logger(),<sp/></highlight><highlight class="stringliteral">&quot;Subscribing<sp/>to<sp/>true<sp/>velocity<sp/>topic:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>truth_velocity_topic.c_str());</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classkinematic__arbiter_1_1ros2_1_1KinematicArbiterNode_1af65991b5c8b7d40008fed7dd7a850809" kindref="member">truth_velocity_sub_</ref><sp/>=<sp/>this-&gt;create_subscription&lt;geometry_msgs::msg::TwistStamped&gt;(</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>truth_velocity_topic,<sp/>10,</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::bind(&amp;<ref refid="classkinematic__arbiter_1_1ros2_1_1KinematicArbiterNode_1a5b4140c063627c2a6bc02346be4ad018" kindref="member">KinematicArbiterNode::truthVelocityCallback</ref>,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>std::placeholders::_1));</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::exception&amp;<sp/>e)<sp/>{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>RCLCPP_WARN(this-&gt;get_logger(),<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>setting<sp/>up<sp/>true<sp/>state<sp/>subscribers:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>e.what());</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>reset<sp/>service</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><ref refid="classkinematic__arbiter_1_1ros2_1_1KinematicArbiterNode_1aff67e137a04bd9051d84a6244e2be296" kindref="member">reset_service_</ref><sp/>=<sp/>this-&gt;create_service&lt;std_srvs::srv::Trigger&gt;(</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;~/reset&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::bind(&amp;<ref refid="classkinematic__arbiter_1_1ros2_1_1KinematicArbiterNode_1afd1ba0177f9da2995b38f17181ef823b" kindref="member">KinematicArbiterNode::handleResetService</ref>,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::placeholders::_1,<sp/>std::placeholders::_2));</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/>RCLCPP_INFO(this-&gt;get_logger(),<sp/></highlight><highlight class="stringliteral">&quot;Created<sp/>reset<sp/>service<sp/>on<sp/>&apos;%s/reset&apos;&quot;</highlight><highlight class="normal">,<sp/>this-&gt;get_namespace());</highlight></codeline>
<codeline lineno="140"><highlight class="normal">}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Simplify<sp/>the<sp/>sensor<sp/>configuration<sp/>method<sp/>to<sp/>focus<sp/>only<sp/>on<sp/>param<sp/>loading</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143" refid="classkinematic__arbiter_1_1ros2_1_1KinematicArbiterNode_1a85473ab7f0e6c297de92a046cba32b33" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classkinematic__arbiter_1_1ros2_1_1KinematicArbiterNode_1a85473ab7f0e6c297de92a046cba32b33" kindref="member">KinematicArbiterNode::configureSensorsFromLoadedParams</ref>()<sp/>{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Process<sp/>position<sp/>sensors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;has_parameter(</highlight><highlight class="stringliteral">&quot;position_sensors.position_sensor.topic&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>topic<sp/>=<sp/>this-&gt;get_parameter(</highlight><highlight class="stringliteral">&quot;position_sensors.position_sensor.topic&quot;</highlight><highlight class="normal">).as_string();</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>frame_id<sp/>=<sp/>this-&gt;get_parameter(</highlight><highlight class="stringliteral">&quot;position_sensors.position_sensor.frame_id&quot;</highlight><highlight class="normal">).as_string();</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>validation<sp/>parameters<sp/>with<sp/>defaults<sp/>if<sp/>not<sp/>specified</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>p2m_ratio<sp/>=<sp/>2.0;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>mediation_action<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;force_accept&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;has_parameter(</highlight><highlight class="stringliteral">&quot;position_sensors.position_sensor.p2m_noise_ratio&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p2m_ratio<sp/>=<sp/>this-&gt;get_parameter(</highlight><highlight class="stringliteral">&quot;position_sensors.position_sensor.p2m_noise_ratio&quot;</highlight><highlight class="normal">).as_double();</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;has_parameter(</highlight><highlight class="stringliteral">&quot;position_sensors.position_sensor.mediation_action&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mediation_action<sp/>=<sp/>this-&gt;get_parameter(</highlight><highlight class="stringliteral">&quot;position_sensors.position_sensor.mediation_action&quot;</highlight><highlight class="normal">).as_string();</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>RCLCPP_INFO(this-&gt;get_logger(),<sp/></highlight><highlight class="stringliteral">&quot;Adding<sp/>position<sp/>sensor:<sp/>topic=&apos;%s&apos;,<sp/>frame_id=&apos;%s&apos;,<sp/>p2m_ratio=%.2f,<sp/>action=&apos;%s&apos;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>topic.c_str(),<sp/>frame_id.c_str(),<sp/>p2m_ratio,<sp/>mediation_action.c_str());</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classkinematic__arbiter_1_1ros2_1_1KinematicArbiterNode_1a52faaa348228ea7c7812f574208431a3" kindref="member">filter_wrapper_</ref>-&gt;addPositionSensor(</highlight><highlight class="stringliteral">&quot;position_sensor&quot;</highlight><highlight class="normal">,<sp/>topic,<sp/>frame_id,<sp/>p2m_ratio,<sp/>mediation_action);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Process<sp/>pose<sp/>sensors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;has_parameter(</highlight><highlight class="stringliteral">&quot;pose_sensors.pose_sensor.topic&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>topic<sp/>=<sp/>this-&gt;get_parameter(</highlight><highlight class="stringliteral">&quot;pose_sensors.pose_sensor.topic&quot;</highlight><highlight class="normal">).as_string();</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>frame_id<sp/>=<sp/>this-&gt;get_parameter(</highlight><highlight class="stringliteral">&quot;pose_sensors.pose_sensor.frame_id&quot;</highlight><highlight class="normal">).as_string();</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>validation<sp/>parameters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>p2m_ratio<sp/>=<sp/>2.0;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>mediation_action<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;force_accept&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;has_parameter(</highlight><highlight class="stringliteral">&quot;pose_sensors.pose_sensor.p2m_noise_ratio&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p2m_ratio<sp/>=<sp/>this-&gt;get_parameter(</highlight><highlight class="stringliteral">&quot;pose_sensors.pose_sensor.p2m_noise_ratio&quot;</highlight><highlight class="normal">).as_double();</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;has_parameter(</highlight><highlight class="stringliteral">&quot;pose_sensors.pose_sensor.mediation_action&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mediation_action<sp/>=<sp/>this-&gt;get_parameter(</highlight><highlight class="stringliteral">&quot;pose_sensors.pose_sensor.mediation_action&quot;</highlight><highlight class="normal">).as_string();</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>RCLCPP_INFO(this-&gt;get_logger(),<sp/></highlight><highlight class="stringliteral">&quot;Adding<sp/>pose<sp/>sensor:<sp/>topic=&apos;%s&apos;,<sp/>frame_id=&apos;%s&apos;,<sp/>p2m_ratio=%.2f,<sp/>action=&apos;%s&apos;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>topic.c_str(),<sp/>frame_id.c_str(),<sp/>p2m_ratio,<sp/>mediation_action.c_str());</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classkinematic__arbiter_1_1ros2_1_1KinematicArbiterNode_1a52faaa348228ea7c7812f574208431a3" kindref="member">filter_wrapper_</ref>-&gt;addPoseSensor(</highlight><highlight class="stringliteral">&quot;pose_sensor&quot;</highlight><highlight class="normal">,<sp/>topic,<sp/>frame_id,<sp/>p2m_ratio,<sp/>mediation_action);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Process<sp/>velocity<sp/>sensors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;has_parameter(</highlight><highlight class="stringliteral">&quot;velocity_sensors.velocity_sensor.topic&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>topic<sp/>=<sp/>this-&gt;get_parameter(</highlight><highlight class="stringliteral">&quot;velocity_sensors.velocity_sensor.topic&quot;</highlight><highlight class="normal">).as_string();</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>frame_id<sp/>=<sp/>this-&gt;get_parameter(</highlight><highlight class="stringliteral">&quot;velocity_sensors.velocity_sensor.frame_id&quot;</highlight><highlight class="normal">).as_string();</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>validation<sp/>parameters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>p2m_ratio<sp/>=<sp/>2.0;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>mediation_action<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;force_accept&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;has_parameter(</highlight><highlight class="stringliteral">&quot;velocity_sensors.velocity_sensor.p2m_noise_ratio&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p2m_ratio<sp/>=<sp/>this-&gt;get_parameter(</highlight><highlight class="stringliteral">&quot;velocity_sensors.velocity_sensor.p2m_noise_ratio&quot;</highlight><highlight class="normal">).as_double();</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;has_parameter(</highlight><highlight class="stringliteral">&quot;velocity_sensors.velocity_sensor.mediation_action&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mediation_action<sp/>=<sp/>this-&gt;get_parameter(</highlight><highlight class="stringliteral">&quot;velocity_sensors.velocity_sensor.mediation_action&quot;</highlight><highlight class="normal">).as_string();</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>RCLCPP_INFO(this-&gt;get_logger(),<sp/></highlight><highlight class="stringliteral">&quot;Adding<sp/>velocity<sp/>sensor:<sp/>topic=&apos;%s&apos;,<sp/>frame_id=&apos;%s&apos;,<sp/>p2m_ratio=%.2f,<sp/>action=&apos;%s&apos;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>topic.c_str(),<sp/>frame_id.c_str(),<sp/>p2m_ratio,<sp/>mediation_action.c_str());</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classkinematic__arbiter_1_1ros2_1_1KinematicArbiterNode_1a52faaa348228ea7c7812f574208431a3" kindref="member">filter_wrapper_</ref>-&gt;addVelocitySensor(</highlight><highlight class="stringliteral">&quot;velocity_sensor&quot;</highlight><highlight class="normal">,<sp/>topic,<sp/>frame_id,<sp/>p2m_ratio,<sp/>mediation_action);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Process<sp/>IMU<sp/>sensors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;has_parameter(</highlight><highlight class="stringliteral">&quot;imu_sensors.imu_sensor.topic&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>topic<sp/>=<sp/>this-&gt;get_parameter(</highlight><highlight class="stringliteral">&quot;imu_sensors.imu_sensor.topic&quot;</highlight><highlight class="normal">).as_string();</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>frame_id<sp/>=<sp/>this-&gt;get_parameter(</highlight><highlight class="stringliteral">&quot;imu_sensors.imu_sensor.frame_id&quot;</highlight><highlight class="normal">).as_string();</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>validation<sp/>parameters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>p2m_ratio<sp/>=<sp/>2.0;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>mediation_action<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;force_accept&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;has_parameter(</highlight><highlight class="stringliteral">&quot;imu_sensors.imu_sensor.p2m_noise_ratio&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p2m_ratio<sp/>=<sp/>this-&gt;get_parameter(</highlight><highlight class="stringliteral">&quot;imu_sensors.imu_sensor.p2m_noise_ratio&quot;</highlight><highlight class="normal">).as_double();</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;has_parameter(</highlight><highlight class="stringliteral">&quot;imu_sensors.imu_sensor.mediation_action&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mediation_action<sp/>=<sp/>this-&gt;get_parameter(</highlight><highlight class="stringliteral">&quot;imu_sensors.imu_sensor.mediation_action&quot;</highlight><highlight class="normal">).as_string();</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>RCLCPP_INFO(this-&gt;get_logger(),<sp/></highlight><highlight class="stringliteral">&quot;Adding<sp/>IMU<sp/>sensor:<sp/>topic=&apos;%s&apos;,<sp/>frame_id=&apos;%s&apos;,<sp/>p2m_ratio=%.2f,<sp/>action=&apos;%s&apos;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>topic.c_str(),<sp/>frame_id.c_str(),<sp/>p2m_ratio,<sp/>mediation_action.c_str());</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classkinematic__arbiter_1_1ros2_1_1KinematicArbiterNode_1a52faaa348228ea7c7812f574208431a3" kindref="member">filter_wrapper_</ref>-&gt;addImuSensor(</highlight><highlight class="stringliteral">&quot;imu_sensor&quot;</highlight><highlight class="normal">,<sp/>topic,<sp/>frame_id,<sp/>p2m_ratio,<sp/>mediation_action);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::exception&amp;<sp/>e)<sp/>{</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>RCLCPP_ERROR(this-&gt;get_logger(),<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>configuring<sp/>sensors:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>e.what());</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="236"><highlight class="normal">}</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238" refid="classkinematic__arbiter_1_1ros2_1_1KinematicArbiterNode_1a3ab1d18d88852ef31e3cb08631bf35f1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classkinematic__arbiter_1_1ros2_1_1KinematicArbiterNode_1a3ab1d18d88852ef31e3cb08631bf35f1" kindref="member">KinematicArbiterNode::publishEstimates</ref>()<sp/>{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>filter<sp/>is<sp/>initialized</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classkinematic__arbiter_1_1ros2_1_1KinematicArbiterNode_1a52faaa348228ea7c7812f574208431a3" kindref="member">filter_wrapper_</ref>-&gt;isInitialized())<sp/>{</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>init_message_count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(init_message_count++<sp/>%<sp/>10<sp/>==<sp/>0)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>Only<sp/>log<sp/>every<sp/>10th<sp/>message<sp/>to<sp/>avoid<sp/>spam</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>RCLCPP_INFO(this-&gt;get_logger(),<sp/></highlight><highlight class="stringliteral">&quot;Filter<sp/>not<sp/>yet<sp/>initialized&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Log<sp/>first<sp/>successful<sp/>publication</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>first_publication<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first_publication)<sp/>{</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>RCLCPP_INFO(this-&gt;get_logger(),<sp/></highlight><highlight class="stringliteral">&quot;Filter<sp/>initialized!<sp/>Publishing<sp/>first<sp/>state<sp/>estimate&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>state<sp/>=<sp/><ref refid="classkinematic__arbiter_1_1ros2_1_1KinematicArbiterNode_1a52faaa348228ea7c7812f574208431a3" kindref="member">filter_wrapper_</ref>-&gt;getPoseEstimate();</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>RCLCPP_INFO(this-&gt;get_logger(),<sp/></highlight><highlight class="stringliteral">&quot;Position:<sp/>[%.3f,<sp/>%.3f,<sp/>%.3f]&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.pose.pose.position.x,<sp/>state.pose.pose.position.y,<sp/>state.pose.pose.position.z);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>first_publication<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>and<sp/>publish<sp/>pose</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>pose_msg<sp/>=<sp/><ref refid="classkinematic__arbiter_1_1ros2_1_1KinematicArbiterNode_1a52faaa348228ea7c7812f574208431a3" kindref="member">filter_wrapper_</ref>-&gt;getPoseEstimate();</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><ref refid="classkinematic__arbiter_1_1ros2_1_1KinematicArbiterNode_1abbe7e9f37fe57641d9d9276ef2aaaacd" kindref="member">pose_pub_</ref>-&gt;publish(pose_msg);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>and<sp/>publish<sp/>velocity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>velocity_msg<sp/>=<sp/><ref refid="classkinematic__arbiter_1_1ros2_1_1KinematicArbiterNode_1a52faaa348228ea7c7812f574208431a3" kindref="member">filter_wrapper_</ref>-&gt;getVelocityEstimate();</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><ref refid="classkinematic__arbiter_1_1ros2_1_1KinematicArbiterNode_1a0ef4e2f29d4b1d31d750a72500a6be46" kindref="member">velocity_pub_</ref>-&gt;publish(velocity_msg);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>and<sp/>publish<sp/>acceleration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>accel_msg<sp/>=<sp/><ref refid="classkinematic__arbiter_1_1ros2_1_1KinematicArbiterNode_1a52faaa348228ea7c7812f574208431a3" kindref="member">filter_wrapper_</ref>-&gt;getAccelerationEstimate();</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><ref refid="classkinematic__arbiter_1_1ros2_1_1KinematicArbiterNode_1a3eaaf1ac9110dd6060933424965d3d89" kindref="member">accel_pub_</ref>-&gt;publish(accel_msg);</highlight></codeline>
<codeline lineno="270"><highlight class="normal">}</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272" refid="classkinematic__arbiter_1_1ros2_1_1KinematicArbiterNode_1ab23bb37f4135e0b8b1d32eb831fa0d92" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classkinematic__arbiter_1_1ros2_1_1KinematicArbiterNode_1ab23bb37f4135e0b8b1d32eb831fa0d92" kindref="member">KinematicArbiterNode::truthPoseCallback</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>geometry_msgs::msg::PoseStamped::SharedPtr<sp/>msg)<sp/>{</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Just<sp/>store<sp/>the<sp/>latest<sp/>message<sp/>-<sp/>metrics<sp/>will<sp/>be<sp/>handled<sp/>externally</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/>RCLCPP_DEBUG(this-&gt;get_logger(),<sp/></highlight><highlight class="stringliteral">&quot;Received<sp/>true<sp/>pose<sp/>at<sp/>time:<sp/>%f&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rclcpp::Time(msg-&gt;header.stamp).seconds());</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><ref refid="classkinematic__arbiter_1_1ros2_1_1KinematicArbiterNode_1a52faaa348228ea7c7812f574208431a3" kindref="member">filter_wrapper_</ref>-&gt;setPoseEstimate(msg);</highlight></codeline>
<codeline lineno="277"><highlight class="normal">}</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279" refid="classkinematic__arbiter_1_1ros2_1_1KinematicArbiterNode_1a5b4140c063627c2a6bc02346be4ad018" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classkinematic__arbiter_1_1ros2_1_1KinematicArbiterNode_1a5b4140c063627c2a6bc02346be4ad018" kindref="member">KinematicArbiterNode::truthVelocityCallback</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>geometry_msgs::msg::TwistStamped::SharedPtr<sp/>msg)<sp/>{</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Just<sp/>store<sp/>the<sp/>latest<sp/>message<sp/>-<sp/>metrics<sp/>will<sp/>be<sp/>handled<sp/>externally</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/>RCLCPP_DEBUG(this-&gt;get_logger(),<sp/></highlight><highlight class="stringliteral">&quot;Received<sp/>true<sp/>velocity<sp/>at<sp/>time:<sp/>%f&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rclcpp::Time(msg-&gt;header.stamp).seconds());</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><ref refid="classkinematic__arbiter_1_1ros2_1_1KinematicArbiterNode_1a52faaa348228ea7c7812f574208431a3" kindref="member">filter_wrapper_</ref>-&gt;setVelocityEstimate(msg);</highlight></codeline>
<codeline lineno="284"><highlight class="normal">}</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286" refid="classkinematic__arbiter_1_1ros2_1_1KinematicArbiterNode_1afd1ba0177f9da2995b38f17181ef823b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classkinematic__arbiter_1_1ros2_1_1KinematicArbiterNode_1afd1ba0177f9da2995b38f17181ef823b" kindref="member">KinematicArbiterNode::handleResetService</ref>(</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;std_srvs::srv::Trigger::Request&gt;<sp/>request,</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;std_srvs::srv::Trigger::Response&gt;<sp/>response)<sp/>{</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/>RCLCPP_INFO(this-&gt;get_logger(),<sp/></highlight><highlight class="stringliteral">&quot;Received<sp/>reset<sp/>request&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Use<sp/>the<sp/>existing<sp/>simple<sp/>reset<sp/>method</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><ref refid="classkinematic__arbiter_1_1ros2_1_1KinematicArbiterNode_1a52faaa348228ea7c7812f574208431a3" kindref="member">filter_wrapper_</ref>-&gt;reset();</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/>response-&gt;success<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/>response-&gt;message<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Filter<sp/>reset<sp/>successful&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/>RCLCPP_INFO(this-&gt;get_logger(),<sp/></highlight><highlight class="stringliteral">&quot;Filter<sp/>reset<sp/>successful&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="298"><highlight class="normal">}</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>ros2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>kinematic_arbiter</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/spencer/ros2workspace/src/kinematic_arbiter/src/ros2/kinematic_arbiter_node.cpp"/>
  </compounddef>
</doxygen>
