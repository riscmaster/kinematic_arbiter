<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="pose__sensor__model_8hpp" kind="file" language="C++">
    <compoundname>pose_sensor_model.hpp</compoundname>
    <includes refid="measurement__model__interface_8hpp" local="yes">kinematic_arbiter/core/measurement_model_interface.hpp</includes>
    <includes refid="state__index_8hpp" local="yes">kinematic_arbiter/core/state_index.hpp</includes>
    <includes refid="sensor__types_8hpp" local="yes">kinematic_arbiter/core/sensor_types.hpp</includes>
    <includedby refid="pose__sensor__handler_8hpp" local="yes">/home/spencer/ros2workspace/src/kinematic_arbiter/include/kinematic_arbiter/ros2/pose_sensor_handler.hpp</includedby>
    <includedby refid="figure8__simulator__node_8hpp" local="yes">/home/spencer/ros2workspace/src/kinematic_arbiter/include/kinematic_arbiter/ros2/simulation/figure8_simulator_node.hpp</includedby>
    <includedby refid="sensor__publisher_8hpp" local="yes">/home/spencer/ros2workspace/src/kinematic_arbiter/include/kinematic_arbiter/ros2/simulation/sensor_publisher.hpp</includedby>
    <includedby refid="figure8__simulator__node_8cpp" local="yes">/home/spencer/ros2workspace/src/kinematic_arbiter/src/ros2/simulation/figure8_simulator_node.cpp</includedby>
    <incdepgraph>
      <node id="7">
        <label>kinematic_arbiter/core/state_index.hpp</label>
        <link refid="state__index_8hpp"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>limits</label>
      </node>
      <node id="12">
        <label>kinematic_arbiter/core/mediation_types.hpp</label>
        <link refid="mediation__types_8hpp"/>
      </node>
      <node id="4">
        <label>Eigen/Geometry</label>
      </node>
      <node id="15">
        <label>cmath</label>
      </node>
      <node id="6">
        <label>stdexcept</label>
      </node>
      <node id="10">
        <label>string</label>
      </node>
      <node id="17">
        <label>random</label>
      </node>
      <node id="3">
        <label>Eigen/Dense</label>
      </node>
      <node id="2">
        <label>kinematic_arbiter/core/measurement_model_interface.hpp</label>
        <link refid="measurement__model__interface_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>vector</label>
      </node>
      <node id="18">
        <label>kinematic_arbiter/core/sensor_types.hpp</label>
        <link refid="sensor__types_8hpp"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>kinematic_arbiter/core/statistical_utils.hpp</label>
        <link refid="statistical__utils_8hpp"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>array</label>
      </node>
      <node id="5">
        <label>iostream</label>
      </node>
      <node id="8">
        <label>cstddef</label>
      </node>
      <node id="11">
        <label>unordered_map</label>
      </node>
      <node id="1">
        <label>/home/spencer/ros2workspace/src/kinematic_arbiter/include/kinematic_arbiter/sensors/pose_sensor_model.hpp</label>
        <link refid="pose__sensor__model_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="10">
        <label>/home/spencer/ros2workspace/src/kinematic_arbiter/include/kinematic_arbiter/ros2/simulation/sensor_publisher.hpp</label>
        <link refid="sensor__publisher_8hpp"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>/home/spencer/ros2workspace/src/kinematic_arbiter/src/ros2/simulation/figure8_simulator_node.cpp</label>
        <link refid="figure8__simulator__node_8cpp"/>
      </node>
      <node id="7">
        <label>/home/spencer/ros2workspace/src/kinematic_arbiter/src/ros2/filter_wrapper.cpp</label>
        <link refid="filter__wrapper_8cpp"/>
      </node>
      <node id="2">
        <label>/home/spencer/ros2workspace/src/kinematic_arbiter/include/kinematic_arbiter/ros2/pose_sensor_handler.hpp</label>
        <link refid="pose__sensor__handler_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>/home/spencer/ros2workspace/src/kinematic_arbiter/src/ros2/main.cpp</label>
        <link refid="main_8cpp"/>
      </node>
      <node id="8">
        <label>/home/spencer/ros2workspace/src/kinematic_arbiter/include/kinematic_arbiter/ros2/simulation/figure8_simulator_node.hpp</label>
        <link refid="figure8__simulator__node_8hpp"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>/home/spencer/ros2workspace/src/kinematic_arbiter/src/ros2/kinematic_arbiter_node.cpp</label>
        <link refid="kinematic__arbiter__node_8cpp"/>
      </node>
      <node id="1">
        <label>/home/spencer/ros2workspace/src/kinematic_arbiter/include/kinematic_arbiter/sensors/pose_sensor_model.hpp</label>
        <link refid="pose__sensor__model_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>/home/spencer/ros2workspace/src/kinematic_arbiter/include/kinematic_arbiter/ros2/filter_wrapper.hpp</label>
        <link refid="filter__wrapper_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>/home/spencer/ros2workspace/src/kinematic_arbiter/include/kinematic_arbiter/ros2/kinematic_arbiter_node.hpp</label>
        <link refid="kinematic__arbiter__node_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="classkinematic__arbiter_1_1sensors_1_1PoseSensorModel" prot="public">kinematic_arbiter::sensors::PoseSensorModel</innerclass>
    <innerclass refid="structkinematic__arbiter_1_1sensors_1_1PoseSensorModel_1_1MeasurementIndex" prot="public">kinematic_arbiter::sensors::PoseSensorModel::MeasurementIndex</innerclass>
    <innernamespace refid="namespacekinematic__arbiter">kinematic_arbiter</innernamespace>
    <innernamespace refid="namespacekinematic__arbiter_1_1sensors">kinematic_arbiter::sensors</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="measurement__model__interface_8hpp" kindref="compound">kinematic_arbiter/core/measurement_model_interface.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="state__index_8hpp" kindref="compound">kinematic_arbiter/core/state_index.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="sensor__types_8hpp" kindref="compound">kinematic_arbiter/core/sensor_types.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacekinematic__arbiter" kindref="compound">kinematic_arbiter</ref><sp/>{</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">sensors<sp/>{</highlight></codeline>
<codeline lineno="16" refid="classkinematic__arbiter_1_1sensors_1_1PoseSensorModel" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classkinematic__arbiter_1_1sensors_1_1PoseSensorModel" kindref="compound">PoseSensorModel</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classkinematic__arbiter_1_1core_1_1MeasurementModelInterface" kindref="compound">core::MeasurementModelInterface</ref><sp/>{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Type<sp/>definitions<sp/>for<sp/>clarity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19" refid="classkinematic__arbiter_1_1sensors_1_1PoseSensorModel_1a326bba3dfb30bc4655207419c3416886" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classkinematic__arbiter_1_1sensors_1_1PoseSensorModel_1a326bba3dfb30bc4655207419c3416886" kindref="member">kMeasurementDimension</ref><sp/>=<sp/><ref refid="structkinematic__arbiter_1_1core_1_1MeasurementDimension" kindref="compound">core::MeasurementDimension&lt;core::SensorType::Pose&gt;::value</ref>;</highlight></codeline>
<codeline lineno="20" refid="classkinematic__arbiter_1_1sensors_1_1PoseSensorModel_1a4d7b7ba64271115103a81143550d25be" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classkinematic__arbiter_1_1core_1_1MeasurementModelInterface" kindref="compound">Base</ref><sp/>=<sp/><ref refid="classkinematic__arbiter_1_1core_1_1MeasurementModelInterface" kindref="compound">core::MeasurementModelInterface</ref>;</highlight></codeline>
<codeline lineno="21" refid="classkinematic__arbiter_1_1sensors_1_1PoseSensorModel_1ad6f9aa0bd45f557e9ccd4351fce1c53d" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classkinematic__arbiter_1_1core_1_1MeasurementModelInterface_1abd357cd1e2aabe2107244532db30ece0" kindref="member">StateVector</ref><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="classkinematic__arbiter_1_1core_1_1MeasurementModelInterface_1abd357cd1e2aabe2107244532db30ece0" kindref="member">Base::StateVector</ref>;</highlight></codeline>
<codeline lineno="22" refid="classkinematic__arbiter_1_1sensors_1_1PoseSensorModel_1a56ce1465b03b736e59f8de0817f264c3" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classkinematic__arbiter_1_1sensors_1_1PoseSensorModel_1a56ce1465b03b736e59f8de0817f264c3" kindref="member">Vector</ref><sp/>=<sp/>Eigen::Matrix&lt;double,<sp/>kMeasurementDimension,<sp/>1&gt;;</highlight></codeline>
<codeline lineno="23" refid="classkinematic__arbiter_1_1sensors_1_1PoseSensorModel_1afcc87cd28867480bb8d6c1d73048901c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classkinematic__arbiter_1_1sensors_1_1PoseSensorModel_1afcc87cd28867480bb8d6c1d73048901c" kindref="member">Jacobian</ref><sp/>=<sp/>Eigen::Matrix&lt;double,<sp/>kMeasurementDimension,<sp/>core::StateIndex::kFullStateSize&gt;;</highlight></codeline>
<codeline lineno="24" refid="classkinematic__arbiter_1_1sensors_1_1PoseSensorModel_1a82aeba6c10c94a86d49338c7542a0c01" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classkinematic__arbiter_1_1sensors_1_1PoseSensorModel_1a82aeba6c10c94a86d49338c7542a0c01" kindref="member">Covariance</ref><sp/>=<sp/>Eigen::Matrix&lt;double,<sp/>kMeasurementDimension,<sp/>kMeasurementDimension&gt;;</highlight></codeline>
<codeline lineno="25" refid="classkinematic__arbiter_1_1sensors_1_1PoseSensorModel_1a5ba49cf9b02ed8a739d43135f3bf12d5" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classkinematic__arbiter_1_1core_1_1MeasurementModelInterface_1acced1b6fad51798933f1526abed8bdf8" kindref="member">StateFlags</ref><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="classkinematic__arbiter_1_1core_1_1MeasurementModelInterface_1acced1b6fad51798933f1526abed8bdf8" kindref="member">Base::StateFlags</ref>;</highlight></codeline>
<codeline lineno="29" refid="structkinematic__arbiter_1_1sensors_1_1PoseSensorModel_1_1MeasurementIndex" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structkinematic__arbiter_1_1sensors_1_1PoseSensorModel_1_1MeasurementIndex" kindref="compound">MeasurementIndex</ref><sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Position<sp/>indices</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31" refid="structkinematic__arbiter_1_1sensors_1_1PoseSensorModel_1_1MeasurementIndex_1aca869efd6fe461d0e4ceb4f0240a6698" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structkinematic__arbiter_1_1sensors_1_1PoseSensorModel_1_1MeasurementIndex_1aca869efd6fe461d0e4ceb4f0240a6698" kindref="member">X</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="32" refid="structkinematic__arbiter_1_1sensors_1_1PoseSensorModel_1_1MeasurementIndex_1a7b208ac8358eaa6c9b164b44a56f59f6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structkinematic__arbiter_1_1sensors_1_1PoseSensorModel_1_1MeasurementIndex_1a7b208ac8358eaa6c9b164b44a56f59f6" kindref="member">Y</ref><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="33" refid="structkinematic__arbiter_1_1sensors_1_1PoseSensorModel_1_1MeasurementIndex_1a3f0f8b68dafc224d0aab20d0c9fd5e3c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structkinematic__arbiter_1_1sensors_1_1PoseSensorModel_1_1MeasurementIndex_1a3f0f8b68dafc224d0aab20d0c9fd5e3c" kindref="member">Z</ref><sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Quaternion<sp/>indices</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36" refid="structkinematic__arbiter_1_1sensors_1_1PoseSensorModel_1_1MeasurementIndex_1aa82e69d83bc6648c75ae18d953e1726a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structkinematic__arbiter_1_1sensors_1_1PoseSensorModel_1_1MeasurementIndex_1aa82e69d83bc6648c75ae18d953e1726a" kindref="member">QW</ref><sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="37" refid="structkinematic__arbiter_1_1sensors_1_1PoseSensorModel_1_1MeasurementIndex_1a5d0d9bba179005ca73133fd5ef220e31" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structkinematic__arbiter_1_1sensors_1_1PoseSensorModel_1_1MeasurementIndex_1a5d0d9bba179005ca73133fd5ef220e31" kindref="member">QX</ref><sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="38" refid="structkinematic__arbiter_1_1sensors_1_1PoseSensorModel_1_1MeasurementIndex_1a4f13afaa4918d546c2db3a3bfc26fa9f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structkinematic__arbiter_1_1sensors_1_1PoseSensorModel_1_1MeasurementIndex_1a4f13afaa4918d546c2db3a3bfc26fa9f" kindref="member">QY</ref><sp/>=<sp/>5;</highlight></codeline>
<codeline lineno="39" refid="structkinematic__arbiter_1_1sensors_1_1PoseSensorModel_1_1MeasurementIndex_1a39070b9dd967395a0d87ae74e563159b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structkinematic__arbiter_1_1sensors_1_1PoseSensorModel_1_1MeasurementIndex_1a39070b9dd967395a0d87ae74e563159b" kindref="member">QZ</ref><sp/>=<sp/>6;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="48" refid="classkinematic__arbiter_1_1sensors_1_1PoseSensorModel_1acb3eb2aaaa1d76efd898721a5812fb6a" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classkinematic__arbiter_1_1sensors_1_1PoseSensorModel_1acb3eb2aaaa1d76efd898721a5812fb6a" kindref="member">PoseSensorModel</ref>(</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Isometry3d&amp;<sp/>sensor_pose_in_body_frame<sp/>=<sp/>Eigen::Isometry3d::Identity(),</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structkinematic__arbiter_1_1core_1_1MeasurementModelInterface_1_1ValidationParams" kindref="compound">ValidationParams</ref>&amp;<sp/>params<sp/>=<sp/><ref refid="structkinematic__arbiter_1_1core_1_1MeasurementModelInterface_1_1ValidationParams" kindref="compound">ValidationParams</ref>())</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="classkinematic__arbiter_1_1core_1_1MeasurementModelInterface" kindref="compound">Base</ref>(core::<ref refid="namespacekinematic__arbiter_1_1core_1a87b6f05b1b83cdb34fb35bed653e4914" kindref="member">SensorType</ref>::Pose,<sp/>sensor_pose_in_body_frame,<sp/>params,<sp/><ref refid="classkinematic__arbiter_1_1sensors_1_1PoseSensorModel_1a82aeba6c10c94a86d49338c7542a0c01" kindref="member">Covariance</ref>::Identity())<sp/>{}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="57" refid="classkinematic__arbiter_1_1sensors_1_1PoseSensorModel_1a974a7e4940abea13e458eea5533df86c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classkinematic__arbiter_1_1sensors_1_1PoseSensorModel_1a974a7e4940abea13e458eea5533df86c" kindref="member">reset</ref>()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classkinematic__arbiter_1_1core_1_1MeasurementModelInterface_1ae0330a0509ec21489d947b102615c8e6" kindref="member">measurement_covariance_</ref><sp/>=<sp/>Covariance::Identity();</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="67" refid="classkinematic__arbiter_1_1sensors_1_1PoseSensorModel_1a9e10f3e5d8151af86c7e09490507b38b" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classkinematic__arbiter_1_1core_1_1MeasurementModelInterface_1a9dfbdba5f6b255c3ac4c8ca73eb58a5b" kindref="member">DynamicVector</ref><sp/><ref refid="classkinematic__arbiter_1_1sensors_1_1PoseSensorModel_1a9e10f3e5d8151af86c7e09490507b38b" kindref="member">PredictMeasurement</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classkinematic__arbiter_1_1core_1_1MeasurementModelInterface_1abd357cd1e2aabe2107244532db30ece0" kindref="member">StateVector</ref>&amp;<sp/>state)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classkinematic__arbiter_1_1sensors_1_1PoseSensorModel_1a56ce1465b03b736e59f8de0817f264c3" kindref="member">Vector</ref><sp/>predicted_measurement<sp/>=<sp/>Vector::Zero();</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Extract<sp/>position<sp/>from<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector3d<sp/>position<sp/>=<sp/>state.segment&lt;3&gt;(<ref refid="structkinematic__arbiter_1_1core_1_1StateIndex_1_1Position_1a5c2652fe956b4be3393dd47bf9fe9d33" kindref="member">core::StateIndex::Position::X</ref>);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Extract<sp/>orientation<sp/>quaternion<sp/>from<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Quaterniond<sp/>orientation(</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state(<ref refid="structkinematic__arbiter_1_1core_1_1StateIndex_1_1Quaternion_1a974ce211cf31eba33fd4a89c0706432f" kindref="member">core::StateIndex::Quaternion::W</ref>),</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state(<ref refid="structkinematic__arbiter_1_1core_1_1StateIndex_1_1Quaternion_1a16846a86810c4a3c7b1651bd10586cfe" kindref="member">core::StateIndex::Quaternion::X</ref>),</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state(<ref refid="structkinematic__arbiter_1_1core_1_1StateIndex_1_1Quaternion_1af1d78b2f18147bf1abec5a47d984e63c" kindref="member">core::StateIndex::Quaternion::Y</ref>),</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state(<ref refid="structkinematic__arbiter_1_1core_1_1StateIndex_1_1Quaternion_1a8a8ad785fbd7f06509eae6b27b7d20c9" kindref="member">core::StateIndex::Quaternion::Z</ref>)</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Extract<sp/>the<sp/>sensor-to-body<sp/>transform<sp/>components</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector3d<sp/>trans_b_s<sp/>=<sp/><ref refid="classkinematic__arbiter_1_1core_1_1MeasurementModelInterface_1a3808ac718326c6a72c2c97e999fccf45" kindref="member">sensor_pose_in_body_frame_</ref>.translation();</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Quaterniond<sp/>rot_b_s(<ref refid="classkinematic__arbiter_1_1core_1_1MeasurementModelInterface_1a3808ac718326c6a72c2c97e999fccf45" kindref="member">sensor_pose_in_body_frame_</ref>.rotation());</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>predicted<sp/>position<sp/>in<sp/>global<sp/>frame</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>p_sensor_global<sp/>=<sp/>p_body<sp/>+<sp/>R_body_to_global<sp/>*<sp/>p_sensor_in_body</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector3d<sp/>predicted_position<sp/>=<sp/>position<sp/>+<sp/>orientation<sp/>*<sp/>trans_b_s;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>predicted<sp/>orientation<sp/>in<sp/>global<sp/>frame</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>q_sensor_global<sp/>=<sp/>q_body<sp/>*<sp/>q_sensor_in_body</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Quaterniond<sp/>predicted_orientation<sp/>=<sp/>orientation<sp/>*<sp/>rot_b_s;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>predicted_orientation.normalize();<sp/></highlight><highlight class="comment">//<sp/>Ensure<sp/>unit<sp/>quaternion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Fill<sp/>measurement<sp/>vector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>predicted_measurement.segment&lt;3&gt;(<ref refid="structkinematic__arbiter_1_1sensors_1_1PoseSensorModel_1_1MeasurementIndex_1aca869efd6fe461d0e4ceb4f0240a6698" kindref="member">MeasurementIndex::X</ref>)<sp/>=<sp/>predicted_position;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>predicted_measurement(<ref refid="structkinematic__arbiter_1_1sensors_1_1PoseSensorModel_1_1MeasurementIndex_1aa82e69d83bc6648c75ae18d953e1726a" kindref="member">MeasurementIndex::QW</ref>)<sp/>=<sp/>predicted_orientation.w();</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>predicted_measurement(<ref refid="structkinematic__arbiter_1_1sensors_1_1PoseSensorModel_1_1MeasurementIndex_1a5d0d9bba179005ca73133fd5ef220e31" kindref="member">MeasurementIndex::QX</ref>)<sp/>=<sp/>predicted_orientation.x();</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>predicted_measurement(<ref refid="structkinematic__arbiter_1_1sensors_1_1PoseSensorModel_1_1MeasurementIndex_1a4f13afaa4918d546c2db3a3bfc26fa9f" kindref="member">MeasurementIndex::QY</ref>)<sp/>=<sp/>predicted_orientation.y();</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>predicted_measurement(<ref refid="structkinematic__arbiter_1_1sensors_1_1PoseSensorModel_1_1MeasurementIndex_1a39070b9dd967395a0d87ae74e563159b" kindref="member">MeasurementIndex::QZ</ref>)<sp/>=<sp/>predicted_orientation.z();</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>predicted_measurement;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="110" refid="classkinematic__arbiter_1_1sensors_1_1PoseSensorModel_1ad2067f9a7583a777b16cbafb51c90d82" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classkinematic__arbiter_1_1core_1_1MeasurementModelInterface_1a72e3859677c567145f7abfddc1783368" kindref="member">DynamicJacobian</ref><sp/><ref refid="classkinematic__arbiter_1_1sensors_1_1PoseSensorModel_1ad2067f9a7583a777b16cbafb51c90d82" kindref="member">GetMeasurementJacobian</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classkinematic__arbiter_1_1core_1_1MeasurementModelInterface_1abd357cd1e2aabe2107244532db30ece0" kindref="member">StateVector</ref>&amp;<sp/></highlight><highlight class="comment">/*<sp/>state<sp/>*/</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classkinematic__arbiter_1_1sensors_1_1PoseSensorModel_1afcc87cd28867480bb8d6c1d73048901c" kindref="member">Jacobian</ref><sp/>jacobian<sp/>=<sp/>Jacobian::Zero();</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Position<sp/>part<sp/>of<sp/>the<sp/>Jacobian<sp/>-<sp/>derivative<sp/>with<sp/>respect<sp/>to<sp/>position<sp/>is<sp/>identity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>jacobian.block&lt;3,<sp/>3&gt;(<ref refid="structkinematic__arbiter_1_1sensors_1_1PoseSensorModel_1_1MeasurementIndex_1aca869efd6fe461d0e4ceb4f0240a6698" kindref="member">MeasurementIndex::X</ref>,<sp/><ref refid="structkinematic__arbiter_1_1core_1_1StateIndex_1_1Position_1a5c2652fe956b4be3393dd47bf9fe9d33" kindref="member">core::StateIndex::Position::X</ref>)<sp/>=</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Matrix3d::Identity();</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Remove<sp/>coupling<sp/>between<sp/>linear<sp/>and<sp/>angular<sp/>position<sp/>in<sp/>the<sp/>jacobian<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>setting<sp/>to<sp/>zero.<sp/>Derivation<sp/>of<sp/>partial<sp/>of<sp/>position<sp/>with<sp/>respect<sp/>to<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>rotation<sp/>in<sp/>quaternion<sp/>form<sp/>can<sp/>be<sp/>found<sp/>here:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>http://www.iri.upc.edu/people/jsola/JoanSola/objectes/notes/kinematics.pdf</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>jacobian.block&lt;3,<sp/>4&gt;(<ref refid="structkinematic__arbiter_1_1sensors_1_1PoseSensorModel_1_1MeasurementIndex_1aca869efd6fe461d0e4ceb4f0240a6698" kindref="member">MeasurementIndex::X</ref>,<sp/><ref refid="structkinematic__arbiter_1_1core_1_1StateIndex_1_1Quaternion_1a974ce211cf31eba33fd4a89c0706432f" kindref="member">core::StateIndex::Quaternion::W</ref>)<sp/>=</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Matrix&lt;double,<sp/>3,<sp/>4&gt;::Zero();</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Extract<sp/>sensor-in-body<sp/>quaternion<sp/>components<sp/>(q2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Quaterniond<sp/>q2(<ref refid="classkinematic__arbiter_1_1core_1_1MeasurementModelInterface_1a3808ac718326c6a72c2c97e999fccf45" kindref="member">sensor_pose_in_body_frame_</ref>.rotation());</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>a2<sp/>=<sp/>q2.w(),<sp/>b2<sp/>=<sp/>q2.x(),<sp/>c2<sp/>=<sp/>q2.y(),<sp/>d2<sp/>=<sp/>q2.z();</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Quaternion<sp/>Jacobian<sp/>matrix<sp/>-<sp/>exactly<sp/>matching<sp/>the<sp/>first<sp/>provided<sp/>formulation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Matrix4d<sp/>quaternion_product_jacobian;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>quaternion_product_jacobian<sp/>&lt;&lt;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>clang-format<sp/>off</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a2,<sp/><sp/>b2,<sp/><sp/>c2,<sp/><sp/>d2,</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-b2,<sp/><sp/>a2,<sp/><sp/>d2,<sp/>-c2,</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-c2,<sp/>-d2,<sp/><sp/>a2,<sp/><sp/>b2,</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-d2,<sp/><sp/>c2,<sp/>-b2,<sp/><sp/>a2;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>clang-format<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Fill<sp/>the<sp/>quaternion<sp/>part<sp/>of<sp/>the<sp/>measurement<sp/>Jacobian</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>jacobian.block&lt;4,<sp/>4&gt;(<ref refid="structkinematic__arbiter_1_1sensors_1_1PoseSensorModel_1_1MeasurementIndex_1aa82e69d83bc6648c75ae18d953e1726a" kindref="member">MeasurementIndex::QW</ref>,<sp/><ref refid="structkinematic__arbiter_1_1core_1_1StateIndex_1_1Quaternion_1a974ce211cf31eba33fd4a89c0706432f" kindref="member">core::StateIndex::Quaternion::W</ref>)<sp/>=</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>quaternion_product_jacobian;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>jacobian;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="153" refid="classkinematic__arbiter_1_1sensors_1_1PoseSensorModel_1aacec4656b25778aa75adb69af6a50105" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classkinematic__arbiter_1_1core_1_1MeasurementModelInterface_1acced1b6fad51798933f1526abed8bdf8" kindref="member">StateFlags</ref><sp/><ref refid="classkinematic__arbiter_1_1sensors_1_1PoseSensorModel_1aacec4656b25778aa75adb69af6a50105" kindref="member">GetInitializableStates</ref>()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classkinematic__arbiter_1_1core_1_1MeasurementModelInterface_1acced1b6fad51798933f1526abed8bdf8" kindref="member">StateFlags</ref><sp/>flags<sp/>=<sp/>StateFlags::Zero();</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Pose<sp/>sensor<sp/>can<sp/>initialize<sp/>position</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>flags[<ref refid="structkinematic__arbiter_1_1core_1_1StateIndex_1_1Position_1a5c2652fe956b4be3393dd47bf9fe9d33" kindref="member">core::StateIndex::Position::X</ref>]<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>flags[<ref refid="structkinematic__arbiter_1_1core_1_1StateIndex_1_1Position_1a26718365b8836d35c53729c66a57f409" kindref="member">core::StateIndex::Position::Y</ref>]<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>flags[<ref refid="structkinematic__arbiter_1_1core_1_1StateIndex_1_1Position_1aa1fb254c975be6b79b3be8d2a98bec5f" kindref="member">core::StateIndex::Position::Z</ref>]<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Pose<sp/>sensor<sp/>can<sp/>initialize<sp/>quaternion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>flags[<ref refid="structkinematic__arbiter_1_1core_1_1StateIndex_1_1Quaternion_1a974ce211cf31eba33fd4a89c0706432f" kindref="member">core::StateIndex::Quaternion::W</ref>]<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>flags[<ref refid="structkinematic__arbiter_1_1core_1_1StateIndex_1_1Quaternion_1a16846a86810c4a3c7b1651bd10586cfe" kindref="member">core::StateIndex::Quaternion::X</ref>]<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>flags[<ref refid="structkinematic__arbiter_1_1core_1_1StateIndex_1_1Quaternion_1af1d78b2f18147bf1abec5a47d984e63c" kindref="member">core::StateIndex::Quaternion::Y</ref>]<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>flags[<ref refid="structkinematic__arbiter_1_1core_1_1StateIndex_1_1Quaternion_1a8a8ad785fbd7f06509eae6b27b7d20c9" kindref="member">core::StateIndex::Quaternion::Z</ref>]<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>flags;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="182" refid="classkinematic__arbiter_1_1sensors_1_1PoseSensorModel_1a2664b95c31554a212a0aa1d864ac14a9" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classkinematic__arbiter_1_1core_1_1MeasurementModelInterface_1acced1b6fad51798933f1526abed8bdf8" kindref="member">StateFlags</ref><sp/><ref refid="classkinematic__arbiter_1_1sensors_1_1PoseSensorModel_1a2664b95c31554a212a0aa1d864ac14a9" kindref="member">InitializeState</ref>(</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classkinematic__arbiter_1_1core_1_1MeasurementModelInterface_1a9dfbdba5f6b255c3ac4c8ca73eb58a5b" kindref="member">DynamicVector</ref>&amp;<sp/>measurement,</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classkinematic__arbiter_1_1core_1_1MeasurementModelInterface_1acced1b6fad51798933f1526abed8bdf8" kindref="member">StateFlags</ref>&amp;,</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classkinematic__arbiter_1_1core_1_1MeasurementModelInterface_1abd357cd1e2aabe2107244532db30ece0" kindref="member">StateVector</ref>&amp;<sp/>state,</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classkinematic__arbiter_1_1core_1_1MeasurementModelInterface_1af578e459eedc3354acd2339952c9df05" kindref="member">StateCovariance</ref>&amp;<sp/>covariance)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classkinematic__arbiter_1_1core_1_1MeasurementModelInterface_1ae38b26ee33e03c6729973af8a0575486" kindref="member">ValidateMeasurementSize</ref>(measurement);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classkinematic__arbiter_1_1core_1_1MeasurementModelInterface_1acced1b6fad51798933f1526abed8bdf8" kindref="member">StateFlags</ref><sp/>initialized_states<sp/>=<sp/>StateFlags::Zero();</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Extract<sp/>position<sp/>and<sp/>orientation<sp/>from<sp/>measurement</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector3d<sp/>sensor_position<sp/>=<sp/>measurement.segment&lt;3&gt;(<ref refid="structkinematic__arbiter_1_1sensors_1_1PoseSensorModel_1_1MeasurementIndex_1aca869efd6fe461d0e4ceb4f0240a6698" kindref="member">MeasurementIndex::X</ref>);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Quaterniond<sp/>sensor_orientation(</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>measurement(<ref refid="structkinematic__arbiter_1_1sensors_1_1PoseSensorModel_1_1MeasurementIndex_1aa82e69d83bc6648c75ae18d953e1726a" kindref="member">MeasurementIndex::QW</ref>),</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>measurement(<ref refid="structkinematic__arbiter_1_1sensors_1_1PoseSensorModel_1_1MeasurementIndex_1a5d0d9bba179005ca73133fd5ef220e31" kindref="member">MeasurementIndex::QX</ref>),</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>measurement(<ref refid="structkinematic__arbiter_1_1sensors_1_1PoseSensorModel_1_1MeasurementIndex_1a4f13afaa4918d546c2db3a3bfc26fa9f" kindref="member">MeasurementIndex::QY</ref>),</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>measurement(<ref refid="structkinematic__arbiter_1_1sensors_1_1PoseSensorModel_1_1MeasurementIndex_1a39070b9dd967395a0d87ae74e563159b" kindref="member">MeasurementIndex::QZ</ref>)</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Extract<sp/>the<sp/>sensor-to-body<sp/>transform<sp/>components</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector3d<sp/>trans_b_s<sp/>=<sp/><ref refid="classkinematic__arbiter_1_1core_1_1MeasurementModelInterface_1a3808ac718326c6a72c2c97e999fccf45" kindref="member">sensor_pose_in_body_frame_</ref>.translation();</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Quaterniond<sp/>rot_b_s(<ref refid="classkinematic__arbiter_1_1core_1_1MeasurementModelInterface_1a3808ac718326c6a72c2c97e999fccf45" kindref="member">sensor_pose_in_body_frame_</ref>.rotation());</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Transform<sp/>from<sp/>sensor<sp/>to<sp/>body<sp/>frame</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>orientation:<sp/>q_body<sp/>=<sp/>q_sensor<sp/>*<sp/>(q_sensor_in_body)^-1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Quaterniond<sp/>body_orientation<sp/>=<sp/>sensor_orientation<sp/>*<sp/>rot_b_s.inverse();</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>body_orientation.normalize();<sp/><sp/></highlight><highlight class="comment">//<sp/>Ensure<sp/>unit<sp/>quaternion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>position:<sp/>p_body<sp/>=<sp/>p_sensor<sp/>-<sp/>R_body_to_global<sp/>*<sp/>p_sensor_in_body</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector3d<sp/>body_position<sp/>=<sp/>sensor_position<sp/>-<sp/>body_orientation<sp/>*<sp/>trans_b_s;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>state<sp/>with<sp/>initialized<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>state.segment&lt;3&gt;(<ref refid="structkinematic__arbiter_1_1core_1_1StateIndex_1_1Position_1aefacc52dcba77933043b3802b5b749ae" kindref="member">core::StateIndex::Position::Begin</ref>())<sp/>=<sp/>body_position;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>state(<ref refid="structkinematic__arbiter_1_1core_1_1StateIndex_1_1Quaternion_1a974ce211cf31eba33fd4a89c0706432f" kindref="member">core::StateIndex::Quaternion::W</ref>)<sp/>=<sp/>body_orientation.w();</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>state(<ref refid="structkinematic__arbiter_1_1core_1_1StateIndex_1_1Quaternion_1a16846a86810c4a3c7b1651bd10586cfe" kindref="member">core::StateIndex::Quaternion::X</ref>)<sp/>=<sp/>body_orientation.x();</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>state(<ref refid="structkinematic__arbiter_1_1core_1_1StateIndex_1_1Quaternion_1af1d78b2f18147bf1abec5a47d984e63c" kindref="member">core::StateIndex::Quaternion::Y</ref>)<sp/>=<sp/>body_orientation.y();</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>state(<ref refid="structkinematic__arbiter_1_1core_1_1StateIndex_1_1Quaternion_1a8a8ad785fbd7f06509eae6b27b7d20c9" kindref="member">core::StateIndex::Quaternion::Z</ref>)<sp/>=<sp/>body_orientation.z();</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Transform<sp/>measurement<sp/>covariance<sp/>to<sp/>state<sp/>covariance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Note:<sp/>This<sp/>is<sp/>a<sp/>simplified<sp/>approach;<sp/>a<sp/>more<sp/>rigorous<sp/>implementation<sp/>would</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>apply<sp/>the<sp/>proper<sp/>uncertainty<sp/>transformation<sp/>through<sp/>the<sp/>Jacobian</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>position<sp/>covariance<sp/>(direct<sp/>mapping<sp/>with<sp/>lever<sp/>arm<sp/>effects)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Matrix3d<sp/>pos_cov<sp/>=<sp/><ref refid="classkinematic__arbiter_1_1core_1_1MeasurementModelInterface_1ae0330a0509ec21489d947b102615c8e6" kindref="member">measurement_covariance_</ref>.block&lt;3,<sp/>3&gt;(0,<sp/>0);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>quaternion<sp/>covariance<sp/>(simplified<sp/>transfer<sp/>from<sp/>measurement)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Matrix4d<sp/>quat_cov<sp/>=<sp/><ref refid="classkinematic__arbiter_1_1core_1_1MeasurementModelInterface_1ae0330a0509ec21489d947b102615c8e6" kindref="member">measurement_covariance_</ref>.block&lt;4,<sp/>4&gt;(3,<sp/>3);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>covariance<sp/>blocks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>covariance.block&lt;3,<sp/>3&gt;(</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structkinematic__arbiter_1_1core_1_1StateIndex_1_1Position_1aefacc52dcba77933043b3802b5b749ae" kindref="member">core::StateIndex::Position::Begin</ref>(),</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structkinematic__arbiter_1_1core_1_1StateIndex_1_1Position_1aefacc52dcba77933043b3802b5b749ae" kindref="member">core::StateIndex::Position::Begin</ref>())<sp/>=<sp/>pos_cov;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>covariance.block&lt;4,<sp/>4&gt;(</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structkinematic__arbiter_1_1core_1_1StateIndex_1_1Quaternion_1af3e01b65049a657408ba89e583c1e5ca" kindref="member">core::StateIndex::Quaternion::Begin</ref>(),</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structkinematic__arbiter_1_1core_1_1StateIndex_1_1Quaternion_1af3e01b65049a657408ba89e583c1e5ca" kindref="member">core::StateIndex::Quaternion::Begin</ref>())<sp/>=<sp/>quat_cov;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Mark<sp/>states<sp/>as<sp/>initialized</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>initialized_states[<ref refid="structkinematic__arbiter_1_1core_1_1StateIndex_1_1Position_1a5c2652fe956b4be3393dd47bf9fe9d33" kindref="member">core::StateIndex::Position::X</ref>]<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>initialized_states[<ref refid="structkinematic__arbiter_1_1core_1_1StateIndex_1_1Position_1a26718365b8836d35c53729c66a57f409" kindref="member">core::StateIndex::Position::Y</ref>]<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>initialized_states[<ref refid="structkinematic__arbiter_1_1core_1_1StateIndex_1_1Position_1aa1fb254c975be6b79b3be8d2a98bec5f" kindref="member">core::StateIndex::Position::Z</ref>]<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>initialized_states[<ref refid="structkinematic__arbiter_1_1core_1_1StateIndex_1_1Quaternion_1a974ce211cf31eba33fd4a89c0706432f" kindref="member">core::StateIndex::Quaternion::W</ref>]<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>initialized_states[<ref refid="structkinematic__arbiter_1_1core_1_1StateIndex_1_1Quaternion_1a16846a86810c4a3c7b1651bd10586cfe" kindref="member">core::StateIndex::Quaternion::X</ref>]<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>initialized_states[<ref refid="structkinematic__arbiter_1_1core_1_1StateIndex_1_1Quaternion_1af1d78b2f18147bf1abec5a47d984e63c" kindref="member">core::StateIndex::Quaternion::Y</ref>]<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>initialized_states[<ref refid="structkinematic__arbiter_1_1core_1_1StateIndex_1_1Quaternion_1a8a8ad785fbd7f06509eae6b27b7d20c9" kindref="member">core::StateIndex::Quaternion::Z</ref>]<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>initialized_states;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="249"><highlight class="normal">};</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>sensors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>kinematic_arbiter</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/spencer/ros2workspace/src/kinematic_arbiter/include/kinematic_arbiter/sensors/pose_sensor_model.hpp"/>
  </compounddef>
</doxygen>
